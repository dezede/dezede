from django.db import models, migrations
import re
import django.contrib.gis.db.models.fields
import autoslug.fields
from django.conf import settings
import tinymce.models
import django.core.validators
import libretto.models.base


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Auteur',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
            options={
                'ordering': ('profession', 'individu'),
                'verbose_name': 'author',
                'verbose_name_plural': 'authors',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Caracteristique',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('valeur', models.CharField(help_text='Exemple : \xab en trois actes \xbb.', max_length=400, verbose_name='valeur')),
                ('classement', models.SmallIntegerField(default=1, help_text='Par exemple, on peut choisir de classer les d\xe9coupages par nombre d\u2019actes.', verbose_name='ranking', db_index=True)),
            ],
            options={
                'ordering': ('type', 'classement', 'valeur'),
                'verbose_name': 'caract\xe9ristique',
                'verbose_name_plural': 'caract\xe9ristiques',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CaracteristiqueDeProgramme',
            fields=[
                ('caracteristique_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.Caracteristique', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('type', 'classement', 'valeur'),
                'verbose_name': 'caract\xe9ristique de programme',
                'verbose_name_plural': 'caract\xe9ristiques de programme',
            },
            bases=('libretto.caracteristique',),
        ),
        migrations.CreateModel(
            name='CaracteristiqueDOeuvre',
            fields=[
                ('caracteristique_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.Caracteristique', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('type', 'classement', 'valeur'),
                'verbose_name': 'caract\xe9ristique d\u2019\u0153uvre',
                'verbose_name_plural': 'caract\xe9ristiques d\u2019\u0153uvre',
            },
            bases=('libretto.caracteristique',),
        ),
        migrations.CreateModel(
            name='CaracteristiqueDEnsemble',
            fields=[
                ('caracteristique_ptr',
                 models.OneToOneField(parent_link=True, auto_created=True,
                                      primary_key=True, serialize=False,
                                      to='libretto.Caracteristique', on_delete=models.CASCADE)),
            ],
            bases=('libretto.caracteristique',),
        ),
        migrations.CreateModel(
            name='Devise',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('nom', models.CharField(help_text='Exemple : \xab pound sterling \xbb.', unique=True, max_length=200, db_index=True, blank=True)),
                ('symbole', models.CharField(help_text='Exemple : \xab \xa3 \xbb.', unique=True, max_length=10, db_index=True)),
                ('owner', models.ForeignKey(related_name='devise', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'verbose_name': 'currency',
                'verbose_name_plural': 'currencies',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ElementDeDistribution',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
            options={
                'ordering': ('partie', 'profession', 'individu', 'ensemble'),
                'verbose_name': '\xe9l\xe9ment de distribution',
                'verbose_name_plural': '\xe9l\xe9ments de distribution',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ElementDeProgramme',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('autre', models.CharField(db_index=True, max_length=500, blank=True)),
                ('numerotation', models.CharField(default='O', max_length=1, verbose_name='num\xe9rotation', choices=[('O', 'Num\xe9ros'), ('B', 'Num\xe9ros entre crochets (supposition)'), ('U', 'Puce'), ('E', 'Absente (entracte, etc)')])),
                ('position', models.PositiveSmallIntegerField(verbose_name='position', db_index=True)),
                ('part_d_auteur', models.DecimalField(null=True, verbose_name='P. A.', max_digits=6, decimal_places=2, blank=True)),
                ('caracteristiques', models.ManyToManyField(related_name='elements_de_programme', null=True, verbose_name='caract\xe9ristiques', to='libretto.CaracteristiqueDeProgramme', blank=True)),
                ('distribution', models.ManyToManyField(related_name='elements_de_programme', null=True, to='libretto.ElementDeDistribution', blank=True)),
            ],
            options={
                'ordering': ('position',),
                'verbose_name': '\xe9l\xe9ment de programme',
                'verbose_name_plural': '\xe9l\xe9ments de programme',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('salaire', models.FloatField(db_index=True, null=True, blank=True)),
                ('devise', models.ForeignKey(related_name='engagements', on_delete=django.db.models.deletion.PROTECT, blank=True, to='libretto.Devise', null=True)),
            ],
            options={
                'verbose_name': 'engagement',
                'verbose_name_plural': 'engagements',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Ensemble',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('slug', autoslug.fields.AutoSlugField(unique=True, editable=False)),
                ('debut', models.DateField(null=True, verbose_name='d\xe9but', blank=True)),
                ('debut_precision', models.PositiveSmallIntegerField(default=0, verbose_name='pr\xe9cision du d\xe9but', choices=[(0, 'Ann\xe9e'), (1, 'Mois'), (2, 'Jour')])),
                ('fin', models.DateField(null=True, verbose_name='fin', blank=True)),
                ('fin_precision', models.PositiveSmallIntegerField(default=0, verbose_name='pr\xe9cision de la fin', choices=[(0, 'Ann\xe9e'), (1, 'Mois'), (2, 'Jour')])),
                ('particule_nom', models.CharField(db_index=True, max_length=5, verbose_name='particule du nom', blank=True)),
                ('nom', models.CharField(max_length=75, verbose_name='name', db_index=True)),
                ('caracteristiques', models.ManyToManyField(related_name='elements_de_programme', null=True, verbose_name='caract\xe9ristiques', to='libretto.CaracteristiqueDEnsemble', blank=True)),
            ],
            options={
                'ordering': ('nom',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Etat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', autoslug.fields.AutoSlugField(unique=True, editable=False)),
                ('nom', models.CharField(help_text='In lowercase.', unique=True, max_length=200, verbose_name='name')),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=230, verbose_name='name (plural)', blank=True)),
                ('message', tinymce.models.HTMLField(help_text='Message \xe0 afficher dans la partie consultation.', verbose_name='message', blank=True)),
                ('public', models.BooleanField(default=True, db_index=True, verbose_name='published')),
                ('owner', models.ForeignKey(related_name='etat', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'status',
                'verbose_name_plural': 'statuses',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('programme_incomplet', models.BooleanField(default=False, verbose_name='programme incomplet')),
                ('relache', models.BooleanField(default=False, db_index=True, verbose_name='rel\xe2che')),
                ('circonstance', models.CharField(db_index=True, max_length=500, verbose_name='circonstance', blank=True)),
                ('code_programme', models.CharField(max_length=55, verbose_name='code du programme', blank=True)),
                ('exoneres', models.PositiveIntegerField(null=True, verbose_name='entr\xe9es exon\xe9r\xe9es', blank=True)),
                ('payantes', models.PositiveIntegerField(null=True, verbose_name='entr\xe9es payantes', blank=True)),
                ('frequentation', models.PositiveIntegerField(null=True, verbose_name='fr\xe9quentation totale', blank=True)),
                ('scolaires', models.PositiveIntegerField(null=True, verbose_name='entr\xe9es scolaires', blank=True)),
                ('jauge', models.PositiveIntegerField(null=True, verbose_name='jauge', blank=True)),
                ('recette_generale', models.DecimalField(null=True, verbose_name='recette g\xe9n\xe9rale', max_digits=7, decimal_places=2, blank=True)),
                ('recette_par_billets', models.CharField(blank=True, max_length=30, verbose_name='recette par titre de billets', validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\+\\d+)*$'), 'Entrez uniquement des entiers s\xe9par\xe9s par des \xab\xa0+\xa0\xbb.', 'invalid')])),
                ('fin_date', models.DateField(help_text='Exemple : \xab 6/6/1944 \xbb pour le 6 juin 1944. En cas de date approximative, saisir ici le d\xe9but de l\u2019intervalle, par exemple \xab\xa01/1/1678\xa0\xbb pour 1678.', null=True, verbose_name='date', db_index=True, blank=True)),
                ('fin_date_approx', models.CharField(help_text='Ne remplir que si la date est impr\xe9cise.', max_length=200, verbose_name='date (approximative)', db_index=True, blank=True)),
                ('fin_heure', models.TimeField(db_index=True, null=True, verbose_name='heure', blank=True)),
                ('fin_heure_approx', models.CharField(help_text='Ne remplir que si l\u2019heure est impr\xe9cise.', max_length=200, verbose_name='heure (approximative)', db_index=True, blank=True)),
                ('fin_lieu_approx', models.CharField(help_text='Ne remplir que si le lieu (ou institution) est impr\xe9cis(e).', max_length=200, verbose_name='lieu (approximatif)', db_index=True, blank=True)),
                ('debut_date', models.DateField(help_text='Exemple : \xab 6/6/1944 \xbb pour le 6 juin 1944. En cas de date approximative, saisir ici le d\xe9but de l\u2019intervalle, par exemple \xab\xa01/1/1678\xa0\xbb pour 1678.', verbose_name='date', db_index=True)),
                ('debut_date_approx', models.CharField(help_text='Ne remplir que si la date est impr\xe9cise.', max_length=200, verbose_name='date (approximative)', db_index=True, blank=True)),
                ('debut_heure', models.TimeField(db_index=True, null=True, verbose_name='heure', blank=True)),
                ('debut_heure_approx', models.CharField(help_text='Ne remplir que si l\u2019heure est impr\xe9cise.', max_length=200, verbose_name='heure (approximative)', db_index=True, blank=True)),
                ('debut_lieu_approx', models.CharField(help_text='Ne remplir que si le lieu (ou institution) est impr\xe9cis(e).', max_length=200, verbose_name='lieu (approximatif)', db_index=True, blank=True)),
                ('caracteristiques', models.ManyToManyField(related_name='evenements', null=True, verbose_name='caract\xe9ristiques', to='libretto.CaracteristiqueDeProgramme', blank=True)),
            ],
            options={
                'ordering': ('debut_date', 'debut_heure', 'debut_lieu', 'debut_lieu_approx'),
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'permissions': (('can_change_status', 'Peut changer l\u2019\xe9tat'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Fichier',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('fichier', models.FileField(upload_to='files/')),
                ('folio', models.CharField(max_length=10, blank=True)),
                ('page', models.CharField(max_length=10, blank=True)),
                ('type', models.PositiveSmallIntegerField(blank=True, null=True, choices=[(0, 'autre'), (1, 'image'), (2, 'audio'), (3, 'vid\xe9o')])),
                ('format', models.CharField(max_length=10, blank=True)),
                ('width', models.PositiveSmallIntegerField(null=True, verbose_name='largeur', blank=True)),
                ('height', models.PositiveSmallIntegerField(null=True, verbose_name='hauteur', blank=True)),
                ('duration', models.PositiveSmallIntegerField(null=True, verbose_name='dur\xe9e (en secondes)', blank=True)),
                ('position', models.PositiveSmallIntegerField(verbose_name='position')),
                ('extract', models.OneToOneField(related_name='extract_from', null=True, on_delete=django.db.models.deletion.SET_NULL, blank=True, to='libretto.Fichier', verbose_name='extrait')),
                ('owner', models.ForeignKey(related_name='fichier', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('position',),
                'verbose_name': 'fichier',
                'verbose_name_plural': 'fichiers',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='GenreDOeuvre',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False)),
                ('nom', models.CharField(help_text='In lowercase.', unique=True, max_length=255, verbose_name='name', db_index=True)),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=430, verbose_name='name (plural)', blank=True)),
                ('referent', models.BooleanField(default=False, help_text='L\u2019affichage d\u2019une \u0153uvre remonte jusqu\u2019\xe0 l\u2019\u0153uvre r\xe9f\xe9rente la contenant. Exemple\u202f: le rendu d\u2019une sc\xe8ne sera du type \xab\xa0Le jeune Henri, acte 2, sc\xe8ne 3\xa0\xbb car on remonte jusqu\u2019\xe0 l\u2019\u0153uvre r\xe9f\xe9rente, ici choisie comme \xe9tant celle de nature \xab\xa0op\xe9ra\xa0\xbb', db_index=True, verbose_name='r\xe9f\xe9rent')),
                ('owner', models.ForeignKey(related_name='genredoeuvre', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('parents', models.ManyToManyField(related_name='enfants', null=True, to='libretto.GenreDOeuvre', blank=True)),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name': 'genre d\u2019\u0153uvre',
                'verbose_name_plural': 'genres d\u2019\u0153uvre',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Individu',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('slug', autoslug.fields.AutoSlugField(unique=True, editable=False)),
                ('particule_nom', models.CharField(db_index=True, max_length=10, verbose_name='particule du nom d\u2019usage', blank=True)),
                ('nom', models.CharField(max_length=200, verbose_name='last name', db_index=True)),
                ('particule_nom_naissance', models.CharField(db_index=True, max_length=10, verbose_name='particule du nom de naissance', blank=True)),
                ('nom_naissance', models.CharField(help_text='Ne remplir que s\u2019il est diff\xe9rent du nom d\u2019usage.', max_length=200, verbose_name='birth name', db_index=True, blank=True)),
                ('prenoms', models.CharField(help_text='Exemple : \xab Antonio \xbb.', max_length=50, verbose_name='first names', db_index=True, blank=True)),
                ('prenoms_complets', models.CharField(help_text='Exemple : \xab Antonio Lucio \xbb Ne remplir que s\u2019il existe un ou des pr\xe9noms peu usit\xe9s pour cet individu..', max_length=100, verbose_name='pr\xe9noms complets', db_index=True, blank=True)),
                ('pseudonyme', models.CharField(db_index=True, max_length=200, verbose_name='pseudonym', blank=True)),
                ('designation', models.CharField(default='S', max_length=1, verbose_name='d\xe9signation', choices=[('S', 'Standard (first names, last name, and pseudonym)'), ('P', 'Pseudonym (only)'), ('L', 'Nom d\u2019usage (uniquement)'), ('B', 'Birth Name (standard)'), ('F', 'Pr\xe9nom(s) (uniquement)')])),
                ('titre', models.CharField(blank=True, max_length=1, verbose_name='titre', db_index=True, choices=[('M', 'Mr'), ('J', 'Ms.'), ('F', 'Mrs.')])),
                ('biographie', tinymce.models.HTMLField(verbose_name='biography', blank=True)),
                ('isni', models.CharField(blank=True, help_text='Exemple\xa0: \xab\xa00000000121269154\xa0\xbb pour Mozart.', max_length=16, verbose_name='Identifiant ISNI', validators=[django.core.validators.MinLengthValidator(16), django.core.validators.RegexValidator('^\\d{15}[\\dxX]$', 'Num\xe9ro d\u2019ISNI invalide.')])),
                ('naissance_date', models.DateField(help_text='Exemple : \xab 6/6/1944 \xbb pour le 6 juin 1944. En cas de date approximative, saisir ici le d\xe9but de l\u2019intervalle, par exemple \xab\xa01/1/1678\xa0\xbb pour 1678.', null=True, verbose_name='date', db_index=True, blank=True)),
                ('naissance_date_approx', models.CharField(help_text='Ne remplir que si la date est impr\xe9cise.', max_length=200, verbose_name='date (approximative)', db_index=True, blank=True)),
                ('naissance_lieu_approx', models.CharField(help_text='Ne remplir que si le lieu (ou institution) est impr\xe9cis(e).', max_length=200, verbose_name='lieu (approximatif)', db_index=True, blank=True)),
                ('deces_date', models.DateField(help_text='Exemple : \xab 6/6/1944 \xbb pour le 6 juin 1944. En cas de date approximative, saisir ici le d\xe9but de l\u2019intervalle, par exemple \xab\xa01/1/1678\xa0\xbb pour 1678.', null=True, verbose_name='date', db_index=True, blank=True)),
                ('deces_date_approx', models.CharField(help_text='Ne remplir que si la date est impr\xe9cise.', max_length=200, verbose_name='date (approximative)', db_index=True, blank=True)),
                ('deces_lieu_approx', models.CharField(help_text='Ne remplir que si le lieu (ou institution) est impr\xe9cis(e).', max_length=200, verbose_name='lieu (approximatif)', db_index=True, blank=True)),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name': 'person',
                'verbose_name_plural': 'people',
                'permissions': (('can_change_status', 'Peut changer l\u2019\xe9tat'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Lieu',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('slug', autoslug.fields.AutoSlugField(unique=True, editable=False)),
                ('nom', models.CharField(max_length=200, verbose_name='name', db_index=True)),
                ('historique', tinymce.models.HTMLField(verbose_name='history', blank=True)),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(db_index=True, srid=4326, null=True, verbose_name='point, trac\xe9 ou polygone', blank=True)),
                ('code_postal', models.CharField(max_length=10, verbose_name='code postal', blank=True)),
                ('type_de_scene', models.CharField(blank=True, max_length=1, verbose_name='type de sc\xe8ne', choices=[('N', 'nationale'), ('C', 'conventionn\xe9e')])),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name_plural': 'lieux et institutions',
                'verbose_name': 'lieu ou institution',
                'permissions': (('can_change_status', 'Peut changer l\u2019\xe9tat'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('lieu_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.Lieu', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'institution',
                'verbose_name_plural': 'institutions',
            },
            bases=('libretto.lieu',),
        ),
        migrations.CreateModel(
            name='LieuDivers',
            fields=[
                ('lieu_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.Lieu', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'place',
                'verbose_name_plural': 'places',
            },
            bases=('libretto.lieu',),
        ),
        migrations.CreateModel(
            name='Membre',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('debut', models.DateField(null=True, verbose_name='d\xe9but', blank=True)),
                ('debut_precision', models.PositiveSmallIntegerField(default=0, verbose_name='pr\xe9cision du d\xe9but', choices=[(0, 'Ann\xe9e'), (1, 'Mois'), (2, 'Jour')])),
                ('fin', models.DateField(null=True, verbose_name='fin', blank=True)),
                ('fin_precision', models.PositiveSmallIntegerField(default=0, verbose_name='pr\xe9cision de la fin', choices=[(0, 'Ann\xe9e'), (1, 'Mois'), (2, 'Jour')])),
                ('classement', models.SmallIntegerField(default=1)),
                ('ensemble', models.ForeignKey(related_name='membres', verbose_name='ensemble', to='libretto.Ensemble', on_delete=models.CASCADE)),
                ('individu', models.ForeignKey(related_name='membres', verbose_name='individu', to='libretto.Individu', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('instrument', 'classement'),
                'verbose_name': 'membre',
                'verbose_name_plural': 'membres',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='NatureDeLieu',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False)),
                ('nom', models.CharField(help_text='In lowercase.', unique=True, max_length=255, verbose_name='name', db_index=True)),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=430, verbose_name='name (plural)', blank=True)),
                ('referent', models.BooleanField(default=False, help_text='L\u2019affichage d\u2019un lieu remonte jusqu\u2019au lieu r\xe9f\xe9rent. Exemple\xa0: dans une architecture de pays, villes, th\xe9\xe2tres, etc, \xab\xa0ville, institution, salle\xa0\xbb sera affich\xe9 car on remonte jusqu\u2019\xe0 un lieu r\xe9f\xe9rent, ici choisi comme \xe9tant ceux de nature \xab\xa0ville\xa0\xbb', db_index=True, verbose_name='r\xe9f\xe9rent')),
                ('owner', models.ForeignKey(related_name='naturedelieu', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'nature de lieu',
                'verbose_name_plural': 'natures de lieu',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Oeuvre',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('slug', autoslug.fields.AutoSlugField(unique=True, editable=False)),
                ('prefixe_titre', models.CharField(max_length=20, verbose_name='article', blank=True)),
                ('titre', models.CharField(db_index=True, max_length=200, verbose_name='titre', blank=True)),
                ('coordination', models.CharField(db_index=True, max_length=20, verbose_name='coordination', blank=True)),
                ('prefixe_titre_secondaire', models.CharField(max_length=20, verbose_name='article', blank=True)),
                ('titre_secondaire', models.CharField(db_index=True, max_length=200, verbose_name='titre secondaire', blank=True)),
                ('numero', models.CharField(validators=[django.core.validators.RegexValidator('^[\\d\\w\\-]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentu\xe9es et tiret, le tout sans espace.')], max_length=5, blank=True, help_text='Exemple\xa0: \xab\xa05\xa0\xbb pour symphonie n\xb0\xa05, \xab\xa07a\xa0\xbb pour valse n\xb0\xa07\u202fa, ou encore \xab\xa03-7\xa0\xbb pour sonates n\xb0\xa03 \xe0\xa07. <strong>Ne pas confondre avec le sous-num\xe9ro d\u2019opus.</strong>', verbose_name='num\xe9ro', db_index=True)),
                ('coupe', models.CharField(validators=[django.core.validators.RegexValidator('^\\D+$', 'Vous devez saisir les quantit\xe9s en toutes lettres.')], max_length=100, blank=True, help_text='Exemple\xa0: \xab\xa0trois actes\xa0\xbb pour un op\xe9ra en trois actes.', verbose_name='coupe', db_index=True)),
                ('tempo', models.CharField(help_text='Exemple\xa0: \xab\xa0Largo\xa0\xbb, \xab\xa0Presto ma non troppo\xa0\xbb, etc. Ne pas saisir d\u2019indication m\xe9tronomique.', max_length=50, db_index=True, blank=True)),
                ('tonalite', models.CharField(blank=True, max_length=3, verbose_name='tonality', db_index=True, choices=[('Cc-', 'do b\xe9mol majeur'), ('Cc0', 'do majeur'), ('Cc+', 'do di\xe8se majeur'), ('Cd-', 'r\xe9 b\xe9mol majeur'), ('Cd0', 'r\xe9 majeur'), ('Cd+', 'r\xe9 di\xe8se majeur'), ('Ce-', 'mi b\xe9mol majeur'), ('Ce0', 'mi majeur'), ('Ce+', 'mi di\xe8se majeur'), ('Cf-', 'fa b\xe9mol majeur'), ('Cf0', 'fa majeur'), ('Cf+', 'fa di\xe8se majeur'), ('Cg-', 'sol b\xe9mol majeur'), ('Cg0', 'sol majeur'), ('Cg+', 'sol di\xe8se majeur'), ('Ca-', 'la b\xe9mol majeur'), ('Ca0', 'la majeur'), ('Ca+', 'la di\xe8se majeur'), ('Cb-', 'si b\xe9mol majeur'), ('Cb0', 'si majeur'), ('Cb+', 'si di\xe8se majeur'), ('Cu-', 'ut b\xe9mol majeur'), ('Cu0', 'ut majeur'), ('Cu+', 'ut di\xe8se majeur'), ('Ac-', 'do b\xe9mol mineur'), ('Ac0', 'do mineur'), ('Ac+', 'do di\xe8se mineur'), ('Ad-', 'r\xe9 b\xe9mol mineur'), ('Ad0', 'r\xe9 mineur'), ('Ad+', 'r\xe9 di\xe8se mineur'), ('Ae-', 'mi b\xe9mol mineur'), ('Ae0', 'mi mineur'), ('Ae+', 'mi di\xe8se mineur'), ('Af-', 'fa b\xe9mol mineur'), ('Af0', 'fa mineur'), ('Af+', 'fa di\xe8se mineur'), ('Ag-', 'sol b\xe9mol mineur'), ('Ag0', 'sol mineur'), ('Ag+', 'sol di\xe8se mineur'), ('Aa-', 'la b\xe9mol mineur'), ('Aa0', 'la mineur'), ('Aa+', 'la di\xe8se mineur'), ('Ab-', 'si b\xe9mol mineur'), ('Ab0', 'si mineur'), ('Ab+', 'si di\xe8se mineur'), ('Au-', 'ut b\xe9mol mineur'), ('Au0', 'ut mineur'), ('Au+', 'ut di\xe8se mineur'), ('0c-', 'do b\xe9mol'), ('0c0', 'do'), ('0c+', 'do di\xe8se'), ('0d-', 'r\xe9 b\xe9mol'), ('0d0', 'r\xe9'), ('0d+', 'r\xe9 di\xe8se'), ('0e-', 'mi b\xe9mol'), ('0e0', 'mi'), ('0e+', 'mi di\xe8se'), ('0f-', 'fa b\xe9mol'), ('0f0', 'fa'), ('0f+', 'fa di\xe8se'), ('0g-', 'sol b\xe9mol'), ('0g0', 'sol'), ('0g+', 'sol di\xe8se'), ('0a-', 'la b\xe9mol'), ('0a0', 'la'), ('0a+', 'la di\xe8se'), ('0b-', 'si b\xe9mol'), ('0b0', 'si'), ('0b+', 'si di\xe8se'), ('0u-', 'ut b\xe9mol'), ('0u0', 'ut'), ('0u+', 'ut di\xe8se')])),
                ('sujet', models.CharField(help_text='Exemple\xa0: \xab\xa0un th\xe8me de Beethoven\xa0\xbb pour une variation sur un th\xe8me de Beethoven, \xab\xa0des motifs de &lt;em&gt;Lucia di Lammermoor&lt;/em&gt;\xa0\xbb pour une fantaisie sur des motifs de <em>Lucia di Lammermoor</em> (&lt;em&gt; et &lt;/em&gt; sont les balises HTML pour mettre en emphase).', max_length=80, verbose_name='sujet', blank=True)),
                ('surnom', models.CharField(help_text='Exemple\xa0: \xab\xa0Jupiter\xa0\xbb pour la symphonie n\xb0\xa041 de Mozart.', max_length=50, verbose_name='surnom', db_index=True, blank=True)),
                ('nom_courant', models.CharField(help_text='Exemple\xa0: \xab\xa0barcarolle\xa0\xbb pour le n\xb0\xa013 de l\u2019acte III\xa0des <em>Contes d\u2019Hoffmann</em> d\u2019Offenbach.', max_length=70, verbose_name='nom courant', db_index=True, blank=True)),
                ('incipit', models.CharField(help_text='Exemple\xa0: \xab\xa0Belle nuit, \xf4 nuit d\u2019amour\xa0\xbb pour le n\xb0\xa013 de l\u2019acte III des <em>Contes d\u2019Hoffmann</em> d\u2019Offenbach.', max_length=100, verbose_name='incipit', db_index=True, blank=True)),
                ('opus', models.CharField(validators=[django.core.validators.RegexValidator('^[\\d\\w\\-/]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentu\xe9es, tiret et barre oblique, le tout sans espace.')], max_length=5, blank=True, help_text='Exemple\xa0: \xab\xa012\xa0\xbb pour op.\xa012, \xab\xa027/3\xa0\xbb pour op.\xa027 n\xb0\xa03, \xab\xa08b\xa0\xbb pour op.\xa08\u202fb, ou encore \xab\xa012-15\xa0\xbb pour op.\xa012 \xe0\xa015.', verbose_name='opus', db_index=True)),
                ('ict', models.CharField(help_text='Indice Catalogue Th\xe9matique. Exemple\xa0: \xab\xa0RV\xa042\xa0\xbb, \xab\xa0K.\xa0299d\xa0\xbb ou encore \xab\xa0Hob.\xa0XVI:24\xa0\xbb.', max_length=25, verbose_name='ICT', db_index=True, blank=True)),
                ('type_extrait', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='type d\u2019extrait', db_index=True, choices=[(1, 'acte'), (2, 'tableau'), (3, 'sc\xe8ne'), (4, 'morceau chant\xe9'), (5, 'partie d\u2019oratorio'), (6, 'livre'), (7, 'album'), (8, 'volume'), (9, 'cahier'), (10, 'ordre'), (11, 'mouvement')])),
                ('numero_extrait', models.CharField(validators=[django.core.validators.RegexValidator('^([1-9]\\d*)([^\\d\\.\\-]*)$', 'Vous devez saisir un nombre en chiffres arabes \xe9ventellement suivi de lettres.')], max_length=5, blank=True, help_text='Le num\xe9ro de l\u2019extrait au sein de l\u2019\u0153uvre, par exemple \xab\xa03\xa0\xbb pour le 3<sup>e</sup> mouvement d\u2019un concerto, \xab\xa04\xa0\xbb pour l\u2019acte IV d\u2019un op\xe9ra, ou encore \xab\xa012b\xa0\xbb.', verbose_name='num\xe9ro d\u2019extrait', db_index=True)),
                ('creation_date', models.DateField(help_text='Exemple : \xab 6/6/1944 \xbb pour le 6 juin 1944. En cas de date approximative, saisir ici le d\xe9but de l\u2019intervalle, par exemple \xab\xa01/1/1678\xa0\xbb pour 1678.', null=True, verbose_name='date', db_index=True, blank=True)),
                ('creation_date_approx', models.CharField(help_text='Ne remplir que si la date est impr\xe9cise.', max_length=200, verbose_name='date (approximative)', db_index=True, blank=True)),
                ('creation_heure', models.TimeField(db_index=True, null=True, verbose_name='heure', blank=True)),
                ('creation_heure_approx', models.CharField(help_text='Ne remplir que si l\u2019heure est impr\xe9cise.', max_length=200, verbose_name='heure (approximative)', db_index=True, blank=True)),
                ('creation_lieu_approx', models.CharField(help_text='Ne remplir que si le lieu (ou institution) est impr\xe9cis(e).', max_length=200, verbose_name='lieu (approximatif)', db_index=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('caracteristiques', models.ManyToManyField(related_name='oeuvres', null=True, verbose_name='autres caract\xe9ristiques', to='libretto.CaracteristiqueDOeuvre', blank=True)),
                ('creation_lieu', models.ForeignKey(related_name='oeuvre_creation_set', on_delete=django.db.models.deletion.PROTECT, verbose_name='lieu', blank=True, to='libretto.Lieu', null=True)),
                ('etat', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat')),
                ('extrait_de', models.ForeignKey(related_name='enfants', verbose_name='extrait de', blank=True, to='libretto.Oeuvre', null=True, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('type_extrait', 'numero_extrait', 'titre', 'genre', 'numero', 'coupe', 'tempo', 'tonalite', 'surnom', 'nom_courant', 'incipit', 'opus', 'ict'),
                'verbose_name': '\u0153uvre',
                'verbose_name_plural': '\u0153uvres',
                'permissions': (('can_change_status', 'Peut changer l\u2019\xe9tat'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ParenteDIndividus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('enfant', models.ForeignKey(related_name='parentes', on_delete=django.db.models.deletion.PROTECT, verbose_name='individu enfant', to='libretto.Individu')),
                ('owner', models.ForeignKey(related_name='parentedindividus', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('parent', models.ForeignKey(related_name='enfances', on_delete=django.db.models.deletion.PROTECT, verbose_name='individu parent', to='libretto.Individu')),
            ],
            options={
                'ordering': ('type', 'parent', 'enfant'),
                'verbose_name': 'parent\xe9 d\u2019individus',
                'verbose_name_plural': 'parent\xe9s d\u2019individus',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ParenteDOeuvres',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('fille', models.ForeignKey(related_name='parentes_meres', verbose_name='\u0153uvre fille', to='libretto.Oeuvre', on_delete=models.CASCADE)),
                ('mere', models.ForeignKey(related_name='parentes_filles', verbose_name='\u0153uvre m\xe8re', to='libretto.Oeuvre', on_delete=models.CASCADE)),
                ('owner', models.ForeignKey(related_name='parentedoeuvres', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('type',),
                'verbose_name': 'parent\xe9 d\u2019\u0153uvres',
                'verbose_name_plural': 'parent\xe9s d\u2019\u0153uvres',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Partie',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('slug', autoslug.fields.AutoSlugField(unique=True, editable=False)),
                ('nom', models.CharField(help_text='Le nom d\u2019une partie de la partition, instrumentale ou vocale.', max_length=200, verbose_name='name', db_index=True)),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=230, verbose_name='name (plural)', blank=True)),
                ('classement', models.SmallIntegerField(default=1, verbose_name='ranking', db_index=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
            ],
            options={
                'ordering': ('classement', 'nom'),
                'verbose_name': 'r\xf4le ou instrument',
                'verbose_name_plural': 'r\xf4les et instruments',
                'permissions': (('can_change_status', 'Peut changer l\u2019\xe9tat'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('partie_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.Partie', on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'instrument',
                'verbose_name_plural': 'instruments',
            },
            bases=('libretto.partie',),
        ),
        migrations.CreateModel(
            name='Personnel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('engagements', models.ManyToManyField(related_name='personnels', to='libretto.Engagement', db_index=True)),
                ('owner', models.ForeignKey(related_name='personnel', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'verbose_name': 'personnel',
                'verbose_name_plural': 'personnels',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('slug', autoslug.fields.AutoSlugField(unique=True, editable=False)),
                ('nom', models.CharField(help_text='In lowercase.', unique=True, max_length=200, verbose_name='name', db_index=True)),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=230, verbose_name='name (plural)', blank=True)),
                ('nom_feminin', models.CharField(help_text='Ne pr\xe9ciser que s\u2019il est diff\xe9rent du nom.', max_length=230, verbose_name='nom (au f\xe9minin)', blank=True)),
                ('classement', models.SmallIntegerField(default=1, db_index=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('etat', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat')),
                ('owner', models.ForeignKey(related_name='profession', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('parent', models.ForeignKey(related_name='enfants', verbose_name='parent', blank=True, to='libretto.Profession', null=True, on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('classement', 'nom'),
                'verbose_name': 'profession',
                'verbose_name_plural': 'professions',
                'permissions': (('can_change_status', 'Peut changer l\u2019\xe9tat'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Pupitre',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('soliste', models.NullBooleanField(default=False, verbose_name='soliste', db_index=True)),
                ('quantite_min', models.IntegerField(default=1, verbose_name='quantit\xe9 minimale', db_index=True)),
                ('quantite_max', models.IntegerField(default=1, verbose_name='quantit\xe9 maximale', db_index=True)),
                ('oeuvre', models.ForeignKey(related_name='pupitres', verbose_name='work', to='libretto.Oeuvre', on_delete=models.CASCADE)),
                ('owner', models.ForeignKey(related_name='pupitre', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('partie',),
                'verbose_name': 'pupitre',
                'verbose_name_plural': 'pupitres',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('partie_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.Partie', on_delete=models.CASCADE)),
                ('oeuvre', models.ForeignKey(related_name='roles', verbose_name='work', blank=True, to='libretto.Oeuvre', null=True, on_delete=models.CASCADE)),
            ],
            options={
                'verbose_name': 'r\xf4le',
                'verbose_name_plural': 'r\xf4les',
            },
            bases=('libretto.partie',),
        ),
        migrations.CreateModel(
            name='Saison',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('debut', models.DateField(help_text='Exemple : \xab 6/6/1944 \xbb pour le 6 juin 1944.', verbose_name='d\xe9but')),
                ('fin', models.DateField(verbose_name='fin')),
                ('ensemble', models.ForeignKey(related_name='saisons', verbose_name='ensemble', blank=True, to='libretto.Ensemble', null=True, on_delete=models.CASCADE)),
                ('lieu', models.ForeignKey(related_name='saisons', verbose_name='lieu ou institution', blank=True, to='libretto.Lieu', null=True, on_delete=models.CASCADE)),
                ('owner', models.ForeignKey(related_name='saison', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('lieu', 'debut'),
                'verbose_name': 'saison',
                'verbose_name_plural': 'saisons',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('notes_publiques', tinymce.models.HTMLField(verbose_name='notes publiques', blank=True)),
                ('notes_privees', tinymce.models.HTMLField(verbose_name='notes priv\xe9es', blank=True)),
                ('titre', models.CharField(help_text='Exemple : \xab Journal de Rouen \xbb.', max_length=200, verbose_name='titre', db_index=True, blank=True)),
                ('legende', models.CharField(max_length=600, verbose_name='caption', blank=True)),
                ('numero', models.CharField(help_text='Sans \xab\xa0\u2116\xa0\xbb. Exemple\u202f: \xab\xa052\xa0\xbb', max_length=50, verbose_name='num\xe9ro', db_index=True, blank=True)),
                ('folio', models.CharField(max_length=10, verbose_name='folio', blank=True)),
                ('page', models.CharField(help_text='Sans \xab\xa0p.\xa0\xbb. Exemple\u202f: \xab\xa03\xa0\xbb', max_length=10, verbose_name='page', db_index=True, blank=True)),
                ('lieu_conservation', models.CharField(db_index=True, max_length=50, verbose_name='lieu de conservation', blank=True)),
                ('cote', models.CharField(db_index=True, max_length=35, verbose_name='cote', blank=True)),
                ('url', models.URLField(help_text='Adresse de r\xe9f\xe9rence externe \xe0 Dez\xe8de.', blank=True)),
                ('transcription', tinymce.models.HTMLField(help_text='Recopi\xe9 tel quel, avec les fautes d\u2019orthographe suivies de \xab\xa0[<em>sic</em>]\xa0\xbb le cas \xe9ch\xe9ant.', verbose_name='transcription', blank=True)),
                ('date', models.DateField(help_text='Exemple : \xab 6/6/1944 \xbb pour le 6 juin 1944. En cas de date approximative, saisir ici le d\xe9but de l\u2019intervalle, par exemple \xab\xa01/1/1678\xa0\xbb pour 1678.', null=True, verbose_name='date', db_index=True, blank=True)),
                ('date_approx', models.CharField(help_text='Ne remplir que si la date est impr\xe9cise.', max_length=200, verbose_name='date (approximative)', db_index=True, blank=True)),
            ],
            options={
                'ordering': ('date', 'titre', 'numero', 'page', 'lieu_conservation', 'cote'),
                'verbose_name': 'source',
                'verbose_name_plural': 'sources',
                'permissions': (('can_change_status', 'Peut changer l\u2019\xe9tat'),),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourceEnsemble',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ensemble', models.ForeignKey(related_name='sourceensemble_set', verbose_name='ensemble', to='libretto.Ensemble', on_delete=models.CASCADE)),
                ('source', models.ForeignKey(related_name='sourceensemble_set', to='libretto.Source', on_delete=models.CASCADE)),
            ],
            options={
                'db_table': 'libretto_source_ensembles',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourceEvenement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('evenement', models.ForeignKey(related_name='sourceevenement_set', verbose_name='\xe9v\xe9nement', to='libretto.Evenement', on_delete=models.CASCADE)),
                ('source', models.ForeignKey(related_name='sourceevenement_set', to='libretto.Source', on_delete=models.CASCADE)),
            ],
            options={
                'db_table': 'libretto_source_evenements',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourceIndividu',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('individu', models.ForeignKey(related_name='sourceindividu_set', verbose_name='individu', to='libretto.Individu', on_delete=models.CASCADE)),
                ('source', models.ForeignKey(related_name='sourceindividu_set', to='libretto.Source', on_delete=models.CASCADE)),
            ],
            options={
                'db_table': 'libretto_source_individus',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourceLieu',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('lieu', models.ForeignKey(related_name='sourcelieu_set', verbose_name='lieu', to='libretto.Lieu', on_delete=models.CASCADE)),
                ('source', models.ForeignKey(related_name='sourcelieu_set', to='libretto.Source', on_delete=models.CASCADE)),
            ],
            options={
                'db_table': 'libretto_source_lieux',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourceOeuvre',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('oeuvre', models.ForeignKey(related_name='sourceoeuvre_set', verbose_name='work', to='libretto.Oeuvre', on_delete=models.CASCADE)),
                ('source', models.ForeignKey(related_name='sourceoeuvre_set', to='libretto.Source', on_delete=models.CASCADE)),
            ],
            options={
                'db_table': 'libretto_source_oeuvres',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SourcePartie',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('partie', models.ForeignKey(related_name='sourcepartie_set', verbose_name='r\xf4le ou instrument', to='libretto.Partie', on_delete=models.CASCADE)),
                ('source', models.ForeignKey(related_name='sourcepartie_set', to='libretto.Source', on_delete=models.CASCADE)),
            ],
            options={
                'db_table': 'libretto_source_parties',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristique',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('nom', models.CharField(help_text='Exemple : \xab tonality \xbb.', unique=True, max_length=200, verbose_name='name', db_index=True)),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=230, verbose_name='name (plural)', blank=True)),
                ('classement', models.SmallIntegerField(default=1)),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de caract\xe9ristique',
                'verbose_name_plural': 'types de caract\xe9ristique',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristiqueDeProgramme',
            fields=[
                ('typedecaracteristique_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.TypeDeCaracteristique', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de caract\xe9ristique de programme',
                'verbose_name_plural': 'types de caract\xe9ristique de programme',
            },
            bases=('libretto.typedecaracteristique',),
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristiqueDOeuvre',
            fields=[
                ('typedecaracteristique_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.TypeDeCaracteristique', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de caract\xe9ristique d\u2019\u0153uvre',
                'verbose_name_plural': 'types de caracteristique d\u2019\u0153uvre',
            },
            bases=('libretto.typedecaracteristique',),
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristiqueDEnsemble',
            fields=[
                ('typedecaracteristique_ptr',
                 models.OneToOneField(parent_link=True, auto_created=True,
                                      primary_key=True, serialize=False,
                                      to='libretto.TypeDeCaracteristique', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('classement',),

            },
            bases=('libretto.typedecaracteristique',),
        ),
        migrations.CreateModel(
            name='TypeDeParente',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('nom', models.CharField(help_text='In lowercase.', max_length=100, verbose_name='name', db_index=True)),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=55, verbose_name='name (plural)', blank=True)),
                ('nom_relatif', models.CharField(help_text='In lowercase.', max_length=100, verbose_name='nom relatif', db_index=True)),
                ('nom_relatif_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=130, verbose_name='nom relatif (au pluriel)', blank=True)),
                ('classement', models.SmallIntegerField(default=1, verbose_name='ranking', db_index=True)),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parent\xe9',
                'verbose_name_plural': 'types de parent\xe9s',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TypeDeParenteDIndividus',
            fields=[
                ('typedeparente_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.TypeDeParente', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parent\xe9 d\u2019individus',
                'verbose_name_plural': 'types de parent\xe9 d\u2019individus',
            },
            bases=('libretto.typedeparente',),
        ),
        migrations.CreateModel(
            name='TypeDeParenteDOeuvres',
            fields=[
                ('typedeparente_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='libretto.TypeDeParente', on_delete=models.CASCADE)),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parent\xe9 d\u2019\u0153uvres',
                'verbose_name_plural': 'types de parent\xe9s d\u2019\u0153uvres',
            },
            bases=('libretto.typedeparente',),
        ),
        migrations.CreateModel(
            name='TypeDePersonnel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('nom', models.CharField(unique=True, max_length=100, db_index=True)),
                ('owner', models.ForeignKey(related_name='typedepersonnel', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name': 'type de personnel',
                'verbose_name_plural': 'types de personnel',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TypeDeSource',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False)),
                ('nom', models.CharField(help_text='In lowercase.', unique=True, max_length=200, verbose_name='name', db_index=True)),
                ('nom_pluriel', models.CharField(help_text='\xc0 remplir si le pluriel n\u2019est pas un simple ajout de \xab s \xbb. Exemple : \xab animal \xbb devient \xab animaux \xbb et non \xab animals \xbb.', max_length=230, verbose_name='name (plural)', db_index=True, blank=True)),
                ('owner', models.ForeignKey(related_name='typedesource', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'type de source',
                'verbose_name_plural': 'types de source',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='typedeparente',
            name='owner',
            field=models.ForeignKey(related_name='typedeparente', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='typedeparente',
            name='polymorphic_ctype',
            field=models.ForeignKey(related_name='polymorphic_libretto.typedeparente_set', editable=False, to='contenttypes.ContentType', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='typedeparente',
            unique_together=set([('nom', 'nom_relatif')]),
        ),
        migrations.AddField(
            model_name='typedecaracteristique',
            name='owner',
            field=models.ForeignKey(related_name='typedecaracteristique', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='typedecaracteristique',
            name='polymorphic_ctype',
            field=models.ForeignKey(related_name='polymorphic_libretto.typedecaracteristique_set', editable=False, to='contenttypes.ContentType', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='sourcepartie',
            unique_together=set([('source', 'partie')]),
        ),
        migrations.AlterUniqueTogether(
            name='sourceoeuvre',
            unique_together=set([('source', 'oeuvre')]),
        ),
        migrations.AlterUniqueTogether(
            name='sourcelieu',
            unique_together=set([('source', 'lieu')]),
        ),
        migrations.AlterUniqueTogether(
            name='sourceindividu',
            unique_together=set([('source', 'individu')]),
        ),
        migrations.AlterUniqueTogether(
            name='sourceevenement',
            unique_together=set([('source', 'evenement')]),
        ),
        migrations.AlterUniqueTogether(
            name='sourceensemble',
            unique_together=set([('source', 'ensemble')]),
        ),
        migrations.AddField(
            model_name='source',
            name='ensembles',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceEnsemble', to='libretto.Ensemble'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='etat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='evenements',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceEvenement', to='libretto.Evenement'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='individus',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceIndividu', to='libretto.Individu'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='lieux',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceLieu', to='libretto.Lieu'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='oeuvres',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceOeuvre', to='libretto.Oeuvre'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='owner',
            field=models.ForeignKey(related_name='source', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='parties',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourcePartie', to='libretto.Partie'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='source',
            name='type',
            field=models.ForeignKey(related_name='sources', on_delete=django.db.models.deletion.PROTECT, verbose_name='type', to='libretto.TypeDeSource', help_text='Exemple : \xab report \xbb.'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='pupitre',
            name='partie',
            field=models.ForeignKey(related_name='pupitres', on_delete=django.db.models.deletion.PROTECT, verbose_name='r\xf4le ou instrument', to='libretto.Partie'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='personnel',
            name='saison',
            field=models.ForeignKey(related_name='personnels', on_delete=django.db.models.deletion.PROTECT, to='libretto.Saison'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='personnel',
            name='type',
            field=models.ForeignKey(related_name='personnels', on_delete=django.db.models.deletion.PROTECT, to='libretto.TypeDePersonnel'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partie',
            name='etat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partie',
            name='owner',
            field=models.ForeignKey(related_name='partie', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partie',
            name='parent',
            field=models.ForeignKey(related_name='enfant', verbose_name='r\xf4le ou instrument parent', blank=True, to='libretto.Partie', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partie',
            name='polymorphic_ctype',
            field=models.ForeignKey(related_name='polymorphic_libretto.partie_set', editable=False, to='contenttypes.ContentType', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partie',
            name='professions',
            field=models.ManyToManyField(related_name='parties', to='libretto.Profession', blank=True, help_text='La ou les profession(s) capable(s) de jouer ce r\xf4le ou cet instrument.', null=True, verbose_name='occupations', db_index=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='parentedoeuvres',
            name='type',
            field=models.ForeignKey(related_name='parentes', on_delete=django.db.models.deletion.PROTECT, verbose_name='type', to='libretto.TypeDeParenteDOeuvres'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='parentedoeuvres',
            unique_together=set([('type', 'mere', 'fille')]),
        ),
        migrations.AddField(
            model_name='parentedindividus',
            name='type',
            field=models.ForeignKey(related_name='parentes', on_delete=django.db.models.deletion.PROTECT, verbose_name='type', to='libretto.TypeDeParenteDIndividus'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='filles',
            field=models.ManyToManyField(related_name='meres', null=True, through='libretto.ParenteDOeuvres', to='libretto.Oeuvre', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='genre',
            field=models.ForeignKey(related_name='oeuvres', on_delete=django.db.models.deletion.PROTECT, verbose_name='genre', blank=True, to='libretto.GenreDOeuvre', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='owner',
            field=models.ForeignKey(related_name='oeuvre', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='membre',
            name='instrument',
            field=models.ForeignKey(related_name='membres', verbose_name='instrument', blank=True, to='libretto.Instrument', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='membre',
            name='owner',
            field=models.ForeignKey(related_name='membre', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lieu',
            name='etat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lieu',
            name='nature',
            field=models.ForeignKey(related_name='lieux', on_delete=django.db.models.deletion.PROTECT, verbose_name='nature', to='libretto.NatureDeLieu'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lieu',
            name='owner',
            field=models.ForeignKey(related_name='lieu', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lieu',
            name='parent',
            field=models.ForeignKey(related_name='enfants', verbose_name='parent', blank=True, to='libretto.Lieu', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lieu',
            name='polymorphic_ctype',
            field=models.ForeignKey(related_name='polymorphic_libretto.lieu_set', editable=False, to='contenttypes.ContentType', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='lieu',
            unique_together=set([('nom', 'parent')]),
        ),
        migrations.AlterIndexTogether(
            name='lieu',
            index_together=set([('tree_id', 'level', 'lft', 'rght')]),
        ),
        migrations.AddField(
            model_name='individu',
            name='deces_lieu',
            field=models.ForeignKey(related_name='individu_deces_set', on_delete=django.db.models.deletion.PROTECT, verbose_name='lieu', blank=True, to='libretto.Lieu', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individu',
            name='enfants',
            field=models.ManyToManyField(related_name='parents', through='libretto.ParenteDIndividus', to='libretto.Individu'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individu',
            name='etat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individu',
            name='naissance_lieu',
            field=models.ForeignKey(related_name='individu_naissance_set', on_delete=django.db.models.deletion.PROTECT, verbose_name='lieu', blank=True, to='libretto.Lieu', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individu',
            name='owner',
            field=models.ForeignKey(related_name='individu', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='individu',
            name='professions',
            field=models.ManyToManyField(related_name='individus', null=True, verbose_name='occupations', to='libretto.Profession', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='fichier',
            name='source',
            field=models.ForeignKey(related_name='fichiers', to='libretto.Source', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='evenement',
            name='debut_lieu',
            field=models.ForeignKey(related_name='evenement_debut_set', on_delete=django.db.models.deletion.PROTECT, verbose_name='lieu', blank=True, to='libretto.Lieu', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='evenement',
            name='etat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='evenement',
            name='fin_lieu',
            field=models.ForeignKey(related_name='evenement_fin_set', on_delete=django.db.models.deletion.PROTECT, verbose_name='lieu', blank=True, to='libretto.Lieu', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='evenement',
            name='owner',
            field=models.ForeignKey(related_name='evenement', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ensemble',
            name='etat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, default=libretto.models.base._get_default_etat, verbose_name='\xe9tat', to='libretto.Etat'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ensemble',
            name='individus',
            field=models.ManyToManyField(related_name='ensembles', through='libretto.Membre', to='libretto.Individu'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ensemble',
            name='owner',
            field=models.ForeignKey(related_name='ensemble', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ensemble',
            name='siege',
            field=models.ForeignKey(related_name='ensembles', verbose_name='si\xe8ge', blank=True, to='libretto.Lieu', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='engagement',
            name='individus',
            field=models.ManyToManyField(related_name='engagements', to='libretto.Individu', db_index=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='engagement',
            name='owner',
            field=models.ForeignKey(related_name='engagement', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='engagement',
            name='profession',
            field=models.ForeignKey(related_name='engagements', on_delete=django.db.models.deletion.PROTECT, to='libretto.Profession'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdeprogramme',
            name='evenement',
            field=models.ForeignKey(related_name='programme', verbose_name='\xe9v\xe9nement', to='libretto.Evenement', on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdeprogramme',
            name='oeuvre',
            field=models.ForeignKey(related_name='elements_de_programme', on_delete=django.db.models.deletion.PROTECT, verbose_name='work', blank=True, to='libretto.Oeuvre', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdeprogramme',
            name='owner',
            field=models.ForeignKey(related_name='elementdeprogramme', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdeprogramme',
            name='personnels',
            field=models.ManyToManyField(related_name='elements_de_programme', null=True, to='libretto.Personnel', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='ensemble',
            field=models.ForeignKey(related_name='elements_de_distribution', on_delete=django.db.models.deletion.PROTECT, verbose_name='ensemble', blank=True, to='libretto.Ensemble', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='evenement',
            field=models.ForeignKey(related_name='distribution', verbose_name='\xe9v\xe9nement', blank=True, to='libretto.Evenement', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='individu',
            field=models.ForeignKey(related_name='elements_de_distribution', on_delete=django.db.models.deletion.PROTECT, verbose_name='individu', blank=True, to='libretto.Individu', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='owner',
            field=models.ForeignKey(related_name='elementdedistribution', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='partie',
            field=models.ForeignKey(related_name='elements_de_distribution', on_delete=django.db.models.deletion.PROTECT, verbose_name='r\xf4le ou instrument', blank=True, to='libretto.Partie', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='profession',
            field=models.ForeignKey(related_name='elements_de_distribution', on_delete=django.db.models.deletion.PROTECT, verbose_name='occupations', blank=True, to='libretto.Profession', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='caracteristique',
            name='owner',
            field=models.ForeignKey(related_name='caracteristique', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='caracteristique',
            name='polymorphic_ctype',
            field=models.ForeignKey(related_name='polymorphic_libretto.caracteristique_set', editable=False, to='contenttypes.ContentType', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='caracteristique',
            name='type',
            field=models.ForeignKey(related_name='caracteristiques', on_delete=django.db.models.deletion.PROTECT, verbose_name='type', blank=True, to='libretto.TypeDeCaracteristique', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='auteur',
            name='individu',
            field=models.ForeignKey(related_name='auteurs', on_delete=django.db.models.deletion.PROTECT, verbose_name='individu', to='libretto.Individu'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='auteur',
            name='oeuvre',
            field=models.ForeignKey(related_name='auteurs', verbose_name='work', blank=True, to='libretto.Oeuvre', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='auteur',
            name='owner',
            field=models.ForeignKey(related_name='auteur', on_delete=django.db.models.deletion.PROTECT, verbose_name='propri\xe9taire', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='auteur',
            name='profession',
            field=models.ForeignKey(related_name='auteurs', on_delete=django.db.models.deletion.PROTECT, verbose_name='occupations', to='libretto.Profession'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='auteur',
            name='source',
            field=models.ForeignKey(related_name='auteurs', verbose_name='source', blank=True, to='libretto.Source', null=True, on_delete=models.CASCADE),
            preserve_default=True,
        ),
    ]
