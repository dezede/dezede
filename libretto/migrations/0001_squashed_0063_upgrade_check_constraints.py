# Generated by Django 3.2.13 on 2024-04-09 15:06

import autoslug.fields
import datetime
import db_search.sql
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.ranges
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.db.models.expressions
import libretto.models.base
import libretto.models.personnel
import re
import tinymce.models
import tree.fields
import tree.operations


class Migration(migrations.Migration):

    replaces = [('libretto', '0001_initial'), ('libretto', '0002_create_typedensemble'), ('libretto', '0003_migrate_typedensemble'), ('libretto', '0004_auto_20150422_1719'), ('libretto', '0005_auto_20150423_0910'), ('libretto', '0006_auto_20150423_1841'), ('libretto', '0007_lieu_is_institution'), ('libretto', '0008_migrate_institutions'), ('libretto', '0009_auto_20150423_2042'), ('libretto', '0010_removes_useless_db_index'), ('libretto', '0011_oeuvre_arrangement'), ('libretto', '0012_migrate_arrangements'), ('libretto', '0013_auto_20150425_1207'), ('libretto', '0014_removes_polymorphic_caracteristics'), ('libretto', '0015_removes_3_mptt_usages'), ('libretto', '0016_typedeparentedindividus2_typedeparentedoeuvres2'), ('libretto', '0017_migrate_types_de_parente'), ('libretto', '0018_move_types_de_parente'), ('libretto', '0019_pupitre_facultatif'), ('libretto', '0020_removes_4_unused_models'), ('libretto', '0021_add_partie_type_oeuvre'), ('libretto', '0022_migrate_parties'), ('libretto', '0023_auto_20150430_1707'), ('libretto', '0024_auto_20150512_2212'), ('libretto', '0025_migrate_programme_distribution'), ('libretto', '0026_auto_20150512_2355'), ('libretto', '0027_auto_20150519_0413'), ('libretto', '0028_auto_20150526_0012'), ('libretto', '0029_add_auteur_ensemble_and_constraints'), ('libretto', '0030_auto_20150626_1634'), ('libretto', '0031_add_distribution_constraint'), ('libretto', '0032_auto_20160210_0508'), ('libretto', '0033_auto_20160624_2318'), ('libretto', '0034_auto_20160704_1122'), ('libretto', '0035_auto_20170109_1632'), ('libretto', '0036_auto_20170206_1652'), ('libretto', '0037_profession_nom_feminin_pluriel'), ('libretto', '0038_mptt_to_tree'), ('libretto', '0039_auto_20180807_1156'), ('libretto', '0040_auto_20190830_1727'), ('libretto', '0041_migrate_files'), ('libretto', '0042_auto_20190830_2210'), ('libretto', '0043_auto_20190905_1126'), ('libretto', '0044_auto_20190917_1200'), ('libretto', '0045_auto_20191126_1047'), ('libretto', '0046_auto_20191220_1022'), ('libretto', '0047_source_telechargement_autorise'), ('libretto', '0048_auto_20200302_1917'), ('libretto', '0049_auto_20200311_2001'), ('libretto', '0050_auto_20200511_1301'), ('libretto', '0051_auto_20200624_1605'), ('libretto', '0052_auto_20210210_1420'), ('libretto', '0053_alter_membre_instrument'), ('libretto', '0054_migrate_tree'), ('libretto', '0055_auto_20230706_2032'), ('libretto', '0056_add_search_vectors'), ('libretto', '0057_alter_oeuvre_sujet'), ('libretto', '0058_add_autocomplete_vector'), ('libretto', '0059_oeuvre_dedicataire'), ('libretto', '0060_oeuvre_ambitus'), ('libretto', '0061_change_dedicataire_into_dedicataires'), ('libretto', '0062_fix_numbercharfield_max_length'), ('libretto', '0063_upgrade_check_constraints')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0001_initial'),
        ('tree', '0001_initial'),
        ('db_search', '0001_create_search_configurations'),
    ]

    operations = [
        migrations.CreateModel(
            name='Caracteristique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valeur', models.CharField(help_text='Exemple : « en trois actes ».', max_length=400, verbose_name='valeur')),
                ('classement', models.SmallIntegerField(db_index=True, default=1, help_text='Par exemple, on peut choisir de classer les découpages par nombre d’actes.', verbose_name='ranking')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='caracteristique', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_libretto.caracteristique_set', to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ('type', 'classement', 'valeur'),
                'verbose_name': 'caractéristique',
                'verbose_name_plural': 'caractéristiques',
            },
        ),
        migrations.CreateModel(
            name='CaracteristiqueDeProgramme',
            fields=[
                ('caracteristique_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.caracteristique')),
            ],
            options={
                'ordering': ('type', 'classement', 'valeur'),
                'verbose_name': 'caractéristique de programme',
                'verbose_name_plural': 'caractéristiques de programme',
            },
            bases=('libretto.caracteristique',),
        ),
        migrations.CreateModel(
            name='CaracteristiqueDOeuvre',
            fields=[
                ('caracteristique_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.caracteristique')),
            ],
            options={
                'ordering': ('type', 'classement', 'valeur'),
                'verbose_name': 'caractéristique d’œuvre',
                'verbose_name_plural': 'caractéristiques d’œuvre',
            },
            bases=('libretto.caracteristique',),
        ),
        migrations.CreateModel(
            name='CaracteristiqueDEnsemble',
            fields=[
                ('caracteristique_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.caracteristique')),
            ],
            bases=('libretto.caracteristique',),
        ),
        migrations.CreateModel(
            name='Devise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, db_index=True, help_text='Exemple : « pound sterling ».', max_length=200, unique=True)),
                ('symbole', models.CharField(db_index=True, help_text='Exemple : « £ ».', max_length=10, unique=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='devise', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'verbose_name': 'currency',
                'verbose_name_plural': 'currencies',
            },
        ),
        migrations.CreateModel(
            name='ElementDeDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'ordering': ('partie', 'profession', 'individu', 'ensemble'),
                'verbose_name': 'élément de distribution',
                'verbose_name_plural': 'éléments de distribution',
            },
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salaire', models.FloatField(blank=True, db_index=True, null=True)),
                ('devise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='engagements', to='libretto.devise')),
            ],
            options={
                'verbose_name': 'engagement',
                'verbose_name_plural': 'engagements',
            },
        ),
        migrations.CreateModel(
            name='Ensemble',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, unique=True)),
                ('debut', models.DateField(blank=True, null=True, verbose_name='début')),
                ('debut_precision', models.PositiveSmallIntegerField(choices=[(0, 'Année'), (1, 'Mois'), (2, 'Jour')], default=0, verbose_name='précision du début')),
                ('fin', models.DateField(blank=True, null=True, verbose_name='fin')),
                ('fin_precision', models.PositiveSmallIntegerField(choices=[(0, 'Année'), (1, 'Mois'), (2, 'Jour')], default=0, verbose_name='précision de la fin')),
                ('particule_nom', models.CharField(blank=True, db_index=True, max_length=5, verbose_name='particule du nom')),
                ('nom', models.CharField(db_index=True, max_length=75, verbose_name='name')),
                ('caracteristiques', models.ManyToManyField(blank=True, null=True, related_name='elements_de_programme', to='libretto.CaracteristiqueDEnsemble', verbose_name='caractéristiques')),
            ],
            options={
                'ordering': ('nom',),
            },
        ),
        migrations.CreateModel(
            name='Etat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, unique=True)),
                ('nom', models.CharField(help_text='In lowercase.', max_length=200, unique=True, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='name (plural)')),
                ('message', tinymce.models.HTMLField(blank=True, help_text='Message à afficher dans la partie consultation.', verbose_name='message')),
                ('public', models.BooleanField(db_index=True, default=True, verbose_name='published')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='etat', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True)),
                ('autocomplete_vector', django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'status',
                'verbose_name_plural': 'statuses',
            },
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('programme_incomplet', models.BooleanField(default=False, verbose_name='programme incomplet')),
                ('relache', models.BooleanField(db_index=True, default=False, verbose_name='relâche')),
                ('circonstance', models.CharField(blank=True, db_index=True, max_length=500, verbose_name='circonstance')),
                ('code_programme', models.CharField(blank=True, max_length=55, verbose_name='code du programme')),
                ('exoneres', models.PositiveIntegerField(blank=True, null=True, verbose_name='entrées exonérées')),
                ('payantes', models.PositiveIntegerField(blank=True, null=True, verbose_name='entrées payantes')),
                ('frequentation', models.PositiveIntegerField(blank=True, null=True, verbose_name='fréquentation totale')),
                ('scolaires', models.PositiveIntegerField(blank=True, null=True, verbose_name='entrées scolaires')),
                ('jauge', models.PositiveIntegerField(blank=True, null=True, verbose_name='jauge')),
                ('recette_generale', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='recette générale')),
                ('recette_par_billets', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\+\\d+)*$'), 'Entrez uniquement des entiers séparés par des «\xa0+\xa0».', 'invalid')], verbose_name='recette par titre de billets')),
                ('fin_date', models.DateField(blank=True, db_index=True, help_text='Exemple : « 6/6/1944 » pour le 6 juin 1944. En cas de date approximative, saisir ici le début de l’intervalle, par exemple «\xa01/1/1678\xa0» pour 1678.', null=True, verbose_name='date')),
                ('fin_date_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=200, verbose_name='date (approximative)')),
                ('fin_heure', models.TimeField(blank=True, db_index=True, null=True, verbose_name='heure')),
                ('fin_heure_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=200, verbose_name='heure (approximative)')),
                ('fin_lieu_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=200, verbose_name='lieu (approximatif)')),
                ('debut_date', models.DateField(db_index=True, help_text='Exemple : « 6/6/1944 » pour le 6 juin 1944. En cas de date approximative, saisir ici le début de l’intervalle, par exemple «\xa01/1/1678\xa0» pour 1678.', verbose_name='date')),
                ('debut_date_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=200, verbose_name='date (approximative)')),
                ('debut_heure', models.TimeField(blank=True, db_index=True, null=True, verbose_name='heure')),
                ('debut_heure_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=200, verbose_name='heure (approximative)')),
                ('debut_lieu_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=200, verbose_name='lieu (approximatif)')),
                ('caracteristiques', models.ManyToManyField(blank=True, null=True, related_name='evenements', to='libretto.CaracteristiqueDeProgramme', verbose_name='caractéristiques')),
            ],
            options={
                'ordering': ('debut_date', 'debut_heure', 'debut_lieu', 'debut_lieu_approx'),
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
                'permissions': (('can_change_status', 'Peut changer l’état'),),
            },
        ),
        migrations.CreateModel(
            name='GenreDOeuvre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', autoslug.fields.AutoSlugField(editable=False)),
                ('nom', models.CharField(db_index=True, help_text='In lowercase.', max_length=255, unique=True, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=430, verbose_name='name (plural)')),
                ('referent', models.BooleanField(db_index=True, default=False, help_text='L’affichage d’une œuvre remonte jusqu’à l’œuvre référente la contenant. Exemple\u202f: le rendu d’une scène sera du type «\xa0Le jeune Henri, acte 2, scène 3\xa0» car on remonte jusqu’à l’œuvre référente, ici choisie comme étant celle de nature «\xa0opéra\xa0»', verbose_name='référent')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='genredoeuvre', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('parents', models.ManyToManyField(blank=True, null=True, related_name='enfants', to='libretto.GenreDOeuvre')),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name': 'genre d’œuvre',
                'verbose_name_plural': 'genres d’œuvre',
            },
        ),
        migrations.CreateModel(
            name='Individu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, unique=True)),
                ('particule_nom', models.CharField(blank=True, db_index=True, max_length=10, verbose_name='particule du nom d’usage')),
                ('nom', models.CharField(db_index=True, max_length=200, verbose_name='last name')),
                ('particule_nom_naissance', models.CharField(blank=True, db_index=True, max_length=10, verbose_name='particule du nom de naissance')),
                ('nom_naissance', models.CharField(blank=True, db_index=True, help_text='Ne remplir que s’il est différent du nom d’usage.', max_length=200, verbose_name='birth name')),
                ('prenoms', models.CharField(blank=True, db_index=True, help_text='Exemple : « Antonio ».', max_length=50, verbose_name='first names')),
                ('prenoms_complets', models.CharField(blank=True, db_index=True, help_text='Exemple : « Antonio Lucio » Ne remplir que s’il existe un ou des prénoms peu usités pour cet individu..', max_length=100, verbose_name='prénoms complets')),
                ('pseudonyme', models.CharField(blank=True, db_index=True, max_length=200, verbose_name='pseudonym')),
                ('designation', models.CharField(choices=[('S', 'Standard (first names, last name, and pseudonym)'), ('P', 'Pseudonym (only)'), ('L', 'Nom d’usage (uniquement)'), ('B', 'Birth Name (standard)'), ('F', 'Prénom(s) (uniquement)')], default='S', max_length=1, verbose_name='désignation')),
                ('titre', models.CharField(blank=True, choices=[('M', 'Mr'), ('J', 'Ms.'), ('F', 'Mrs.')], db_index=True, max_length=1, verbose_name='titre')),
                ('biographie', tinymce.models.HTMLField(blank=True, verbose_name='biography')),
                ('isni', models.CharField(blank=True, help_text='Exemple\xa0: «\xa00000000121269154\xa0» pour Mozart.', max_length=16, validators=[django.core.validators.MinLengthValidator(16), django.core.validators.RegexValidator('^\\d{15}[\\dxX]$', 'Numéro d’ISNI invalide.')], verbose_name='Identifiant ISNI')),
                ('naissance_date', models.DateField(blank=True, db_index=True, help_text='Exemple : « 6/6/1944 » pour le 6 juin 1944. En cas de date approximative, saisir ici le début de l’intervalle, par exemple «\xa01/1/1678\xa0» pour 1678.', null=True, verbose_name='date')),
                ('naissance_date_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=200, verbose_name='date (approximative)')),
                ('naissance_lieu_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=200, verbose_name='lieu (approximatif)')),
                ('deces_date', models.DateField(blank=True, db_index=True, help_text='Exemple : « 6/6/1944 » pour le 6 juin 1944. En cas de date approximative, saisir ici le début de l’intervalle, par exemple «\xa01/1/1678\xa0» pour 1678.', null=True, verbose_name='date')),
                ('deces_date_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=200, verbose_name='date (approximative)')),
                ('deces_lieu_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=200, verbose_name='lieu (approximatif)')),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name': 'person',
                'verbose_name_plural': 'people',
                'permissions': (('can_change_status', 'Peut changer l’état'),),
            },
        ),
        migrations.CreateModel(
            name='Lieu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, unique=True)),
                ('nom', models.CharField(db_index=True, max_length=200, verbose_name='name')),
                ('historique', tinymce.models.HTMLField(blank=True, verbose_name='history')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, db_index=True, null=True, srid=4326, verbose_name='point, tracé ou polygone')),
                ('code_postal', models.CharField(blank=True, max_length=10, verbose_name='code postal')),
                ('type_de_scene', models.CharField(blank=True, choices=[('N', 'nationale'), ('C', 'conventionnée')], max_length=1, verbose_name='type de scène')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('etat', models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état')),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name_plural': 'lieux et institutions',
                'verbose_name': 'lieu ou institution',
                'permissions': (('can_change_status', 'Peut changer l’état'),),
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('lieu_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.lieu')),
            ],
            options={
                'verbose_name': 'institution',
                'verbose_name_plural': 'institutions',
            },
            bases=('libretto.lieu',),
        ),
        migrations.CreateModel(
            name='LieuDivers',
            fields=[
                ('lieu_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.lieu')),
            ],
            options={
                'verbose_name': 'place',
                'verbose_name_plural': 'places',
            },
            bases=('libretto.lieu',),
        ),
        migrations.CreateModel(
            name='NatureDeLieu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', autoslug.fields.AutoSlugField(editable=False)),
                ('nom', models.CharField(db_index=True, help_text='In lowercase.', max_length=255, unique=True, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=430, verbose_name='name (plural)')),
                ('referent', models.BooleanField(db_index=True, default=False, help_text='L’affichage d’un lieu remonte jusqu’au lieu référent. Exemple\xa0: dans une architecture de pays, villes, théâtres, etc, «\xa0ville, institution, salle\xa0» sera affiché car on remonte jusqu’à un lieu référent, ici choisi comme étant ceux de nature «\xa0ville\xa0»', verbose_name='référent')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='naturedelieu', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'nature de lieu',
                'verbose_name_plural': 'natures de lieu',
            },
        ),
        migrations.CreateModel(
            name='Oeuvre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, unique=True)),
                ('prefixe_titre', models.CharField(blank=True, max_length=20, verbose_name='article')),
                ('titre', models.CharField(blank=True, db_index=True, max_length=200, verbose_name='titre')),
                ('coordination', models.CharField(blank=True, db_index=True, max_length=20, verbose_name='coordination')),
                ('prefixe_titre_secondaire', models.CharField(blank=True, max_length=20, verbose_name='article')),
                ('titre_secondaire', models.CharField(blank=True, db_index=True, max_length=200, verbose_name='titre secondaire')),
                ('numero', models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa05\xa0» pour symphonie n°\xa05, «\xa07a\xa0» pour valse n°\xa07\u202fa, ou encore «\xa03-7\xa0» pour sonates n°\xa03 à\xa07. <strong>Ne pas confondre avec le sous-numéro d’opus.</strong>', max_length=5, validators=[django.core.validators.RegexValidator('^[\\d\\w\\-]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentuées et tiret, le tout sans espace.')], verbose_name='numéro')),
                ('coupe', models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa0trois actes\xa0» pour un opéra en trois actes.', max_length=100, validators=[django.core.validators.RegexValidator('^\\D+$', 'Vous devez saisir les quantités en toutes lettres.')], verbose_name='coupe')),
                ('tempo', models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa0Largo\xa0», «\xa0Presto ma non troppo\xa0», etc. Ne pas saisir d’indication métronomique.', max_length=50)),
                ('tonalite', models.CharField(blank=True, choices=[('Cc-', 'do bémol majeur'), ('Cc0', 'do majeur'), ('Cc+', 'do dièse majeur'), ('Cd-', 'ré bémol majeur'), ('Cd0', 'ré majeur'), ('Cd+', 'ré dièse majeur'), ('Ce-', 'mi bémol majeur'), ('Ce0', 'mi majeur'), ('Ce+', 'mi dièse majeur'), ('Cf-', 'fa bémol majeur'), ('Cf0', 'fa majeur'), ('Cf+', 'fa dièse majeur'), ('Cg-', 'sol bémol majeur'), ('Cg0', 'sol majeur'), ('Cg+', 'sol dièse majeur'), ('Ca-', 'la bémol majeur'), ('Ca0', 'la majeur'), ('Ca+', 'la dièse majeur'), ('Cb-', 'si bémol majeur'), ('Cb0', 'si majeur'), ('Cb+', 'si dièse majeur'), ('Cu-', 'ut bémol majeur'), ('Cu0', 'ut majeur'), ('Cu+', 'ut dièse majeur'), ('Ac-', 'do bémol mineur'), ('Ac0', 'do mineur'), ('Ac+', 'do dièse mineur'), ('Ad-', 'ré bémol mineur'), ('Ad0', 'ré mineur'), ('Ad+', 'ré dièse mineur'), ('Ae-', 'mi bémol mineur'), ('Ae0', 'mi mineur'), ('Ae+', 'mi dièse mineur'), ('Af-', 'fa bémol mineur'), ('Af0', 'fa mineur'), ('Af+', 'fa dièse mineur'), ('Ag-', 'sol bémol mineur'), ('Ag0', 'sol mineur'), ('Ag+', 'sol dièse mineur'), ('Aa-', 'la bémol mineur'), ('Aa0', 'la mineur'), ('Aa+', 'la dièse mineur'), ('Ab-', 'si bémol mineur'), ('Ab0', 'si mineur'), ('Ab+', 'si dièse mineur'), ('Au-', 'ut bémol mineur'), ('Au0', 'ut mineur'), ('Au+', 'ut dièse mineur'), ('0c-', 'do bémol'), ('0c0', 'do'), ('0c+', 'do dièse'), ('0d-', 'ré bémol'), ('0d0', 'ré'), ('0d+', 'ré dièse'), ('0e-', 'mi bémol'), ('0e0', 'mi'), ('0e+', 'mi dièse'), ('0f-', 'fa bémol'), ('0f0', 'fa'), ('0f+', 'fa dièse'), ('0g-', 'sol bémol'), ('0g0', 'sol'), ('0g+', 'sol dièse'), ('0a-', 'la bémol'), ('0a0', 'la'), ('0a+', 'la dièse'), ('0b-', 'si bémol'), ('0b0', 'si'), ('0b+', 'si dièse'), ('0u-', 'ut bémol'), ('0u0', 'ut'), ('0u+', 'ut dièse')], db_index=True, max_length=3, verbose_name='tonality')),
                ('sujet', models.CharField(blank=True, help_text='Exemple\xa0: «\xa0un thème de Beethoven\xa0» pour une variation sur un thème de Beethoven, «\xa0des motifs de &lt;em&gt;Lucia di Lammermoor&lt;/em&gt;\xa0» pour une fantaisie sur des motifs de <em>Lucia di Lammermoor</em> (&lt;em&gt; et &lt;/em&gt; sont les balises HTML pour mettre en emphase).', max_length=80, verbose_name='sujet')),
                ('surnom', models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa0Jupiter\xa0» pour la symphonie n°\xa041 de Mozart.', max_length=50, verbose_name='surnom')),
                ('nom_courant', models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa0barcarolle\xa0» pour le n°\xa013 de l’acte III\xa0des <em>Contes d’Hoffmann</em> d’Offenbach.', max_length=70, verbose_name='nom courant')),
                ('incipit', models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa0Belle nuit, ô nuit d’amour\xa0» pour le n°\xa013 de l’acte III des <em>Contes d’Hoffmann</em> d’Offenbach.', max_length=100, verbose_name='incipit')),
                ('opus', models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa012\xa0» pour op.\xa012, «\xa027/3\xa0» pour op.\xa027 n°\xa03, «\xa08b\xa0» pour op.\xa08\u202fb, ou encore «\xa012-15\xa0» pour op.\xa012 à\xa015.', max_length=5, validators=[django.core.validators.RegexValidator('^[\\d\\w\\-/]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentuées, tiret et barre oblique, le tout sans espace.')], verbose_name='opus')),
                ('ict', models.CharField(blank=True, db_index=True, help_text='Indice Catalogue Thématique. Exemple\xa0: «\xa0RV\xa042\xa0», «\xa0K.\xa0299d\xa0» ou encore «\xa0Hob.\xa0XVI:24\xa0».', max_length=25, verbose_name='ICT')),
                ('type_extrait', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'acte'), (2, 'tableau'), (3, 'scène'), (4, 'morceau chanté'), (5, 'partie d’oratorio'), (6, 'livre'), (7, 'album'), (8, 'volume'), (9, 'cahier'), (10, 'ordre'), (11, 'mouvement')], db_index=True, null=True, verbose_name='type d’extrait')),
                ('numero_extrait', models.CharField(blank=True, db_index=True, help_text='Le numéro de l’extrait au sein de l’œuvre, par exemple «\xa03\xa0» pour le 3<sup>e</sup> mouvement d’un concerto, «\xa04\xa0» pour l’acte IV d’un opéra, ou encore «\xa012b\xa0».', max_length=5, validators=[django.core.validators.RegexValidator('^([1-9]\\d*)([^\\d\\.\\-]*)$', 'Vous devez saisir un nombre en chiffres arabes éventellement suivi de lettres.')], verbose_name='numéro d’extrait')),
                ('creation_date', models.DateField(blank=True, db_index=True, help_text='Exemple : « 6/6/1944 » pour le 6 juin 1944. En cas de date approximative, saisir ici le début de l’intervalle, par exemple «\xa01/1/1678\xa0» pour 1678.', null=True, verbose_name='date')),
                ('creation_date_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=200, verbose_name='date (approximative)')),
                ('creation_heure', models.TimeField(blank=True, db_index=True, null=True, verbose_name='heure')),
                ('creation_heure_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=200, verbose_name='heure (approximative)')),
                ('creation_lieu_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=200, verbose_name='lieu (approximatif)')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('caracteristiques', models.ManyToManyField(blank=True, null=True, related_name='oeuvres', to='libretto.CaracteristiqueDOeuvre', verbose_name='autres caractéristiques')),
                ('creation_lieu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='oeuvre_creation_set', to='libretto.lieu', verbose_name='lieu')),
                ('etat', models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état')),
                ('extrait_de', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.oeuvre', verbose_name='extrait de')),
            ],
            options={
                'ordering': ('type_extrait', 'numero_extrait', 'titre', 'genre', 'numero', 'coupe', 'tempo', 'tonalite', 'surnom', 'nom_courant', 'incipit', 'opus', 'ict'),
                'verbose_name': 'œuvre',
                'verbose_name_plural': 'œuvres',
                'permissions': (('can_change_status', 'Peut changer l’état'),),
            },
        ),
        migrations.CreateModel(
            name='Partie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, unique=True)),
                ('nom', models.CharField(db_index=True, help_text='Le nom d’une partie de la partition, instrumentale ou vocale.', max_length=200, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='name (plural)')),
                ('classement', models.SmallIntegerField(db_index=True, default=1, verbose_name='ranking')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('etat', models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='partie', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfant', to='libretto.partie', verbose_name='rôle ou instrument parent')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_libretto.partie_set', to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ('classement', 'nom'),
                'verbose_name': 'rôle ou instrument',
                'verbose_name_plural': 'rôles et instruments',
                'permissions': (('can_change_status', 'Peut changer l’état'),),
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('partie_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.partie')),
            ],
            options={
                'verbose_name': 'instrument',
                'verbose_name_plural': 'instruments',
            },
            bases=('libretto.partie',),
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, unique=True)),
                ('nom', models.CharField(db_index=True, help_text='In lowercase.', max_length=200, unique=True, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='name (plural)')),
                ('nom_feminin', models.CharField(blank=True, help_text='Ne préciser que s’il est différent du nom.', max_length=230, verbose_name='nom (au féminin)')),
                ('classement', models.SmallIntegerField(db_index=True, default=1)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('etat', models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='profession', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.profession', verbose_name='parent')),
            ],
            options={
                'ordering': ('classement', 'nom'),
                'verbose_name': 'profession',
                'verbose_name_plural': 'professions',
                'permissions': (('can_change_status', 'Peut changer l’état'),),
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('partie_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.partie')),
                ('oeuvre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='libretto.oeuvre', verbose_name='work')),
            ],
            options={
                'verbose_name': 'rôle',
                'verbose_name_plural': 'rôles',
            },
            bases=('libretto.partie',),
        ),
        migrations.CreateModel(
            name='Saison',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.DateField(help_text='Exemple : « 6/6/1944 » pour le 6 juin 1944.', verbose_name='début')),
                ('fin', models.DateField(verbose_name='fin')),
                ('ensemble', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='saisons', to='libretto.ensemble', verbose_name='ensemble')),
                ('lieu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='saisons', to='libretto.lieu', verbose_name='lieu ou institution')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='saison', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'ordering': ('lieu', 'debut'),
                'verbose_name': 'saison',
                'verbose_name_plural': 'saisons',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes_publiques', tinymce.models.HTMLField(blank=True, verbose_name='notes publiques')),
                ('notes_privees', tinymce.models.HTMLField(blank=True, verbose_name='notes privées')),
                ('titre', models.CharField(blank=True, db_index=True, help_text='Exemple : « Journal de Rouen ».', max_length=200, verbose_name='titre')),
                ('legende', models.CharField(blank=True, max_length=600, verbose_name='caption')),
                ('numero', models.CharField(blank=True, db_index=True, help_text='Sans «\xa0№\xa0». Exemple\u202f: «\xa052\xa0»', max_length=50, verbose_name='numéro')),
                ('folio', models.CharField(blank=True, max_length=10, verbose_name='folio')),
                ('page', models.CharField(blank=True, db_index=True, help_text='Sans «\xa0p.\xa0». Exemple\u202f: «\xa03\xa0»', max_length=10, verbose_name='page')),
                ('lieu_conservation', models.CharField(blank=True, db_index=True, max_length=50, verbose_name='lieu de conservation')),
                ('cote', models.CharField(blank=True, db_index=True, max_length=35, verbose_name='cote')),
                ('url', models.URLField(blank=True, help_text='Adresse de référence externe à Dezède.')),
                ('transcription', tinymce.models.HTMLField(blank=True, help_text='Recopié tel quel, avec les fautes d’orthographe suivies de «\xa0[<em>sic</em>]\xa0» le cas échéant.', verbose_name='transcription')),
                ('date', models.DateField(blank=True, db_index=True, help_text='Exemple : « 6/6/1944 » pour le 6 juin 1944. En cas de date approximative, saisir ici le début de l’intervalle, par exemple «\xa01/1/1678\xa0» pour 1678.', null=True, verbose_name='date')),
                ('date_approx', models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=200, verbose_name='date (approximative)')),
            ],
            options={
                'ordering': ('date', 'titre', 'numero', 'page', 'lieu_conservation', 'cote'),
                'verbose_name': 'source',
                'verbose_name_plural': 'sources',
                'permissions': (('can_change_status', 'Peut changer l’état'),),
            },
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, help_text='Exemple : « tonality ».', max_length=200, unique=True, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='name (plural)')),
                ('classement', models.SmallIntegerField(default=1)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedecaracteristique', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_libretto.typedecaracteristique_set', to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de caractéristique',
                'verbose_name_plural': 'types de caractéristique',
            },
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristiqueDeProgramme',
            fields=[
                ('typedecaracteristique_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.typedecaracteristique')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de caractéristique de programme',
                'verbose_name_plural': 'types de caractéristique de programme',
            },
            bases=('libretto.typedecaracteristique',),
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristiqueDOeuvre',
            fields=[
                ('typedecaracteristique_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.typedecaracteristique')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de caractéristique d’œuvre',
                'verbose_name_plural': 'types de caracteristique d’œuvre',
            },
            bases=('libretto.typedecaracteristique',),
        ),
        migrations.CreateModel(
            name='TypeDeCaracteristiqueDEnsemble',
            fields=[
                ('typedecaracteristique_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.typedecaracteristique')),
            ],
            options={
                'ordering': ('classement',),
            },
            bases=('libretto.typedecaracteristique',),
        ),
        migrations.CreateModel(
            name='TypeDeParente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, help_text='In lowercase.', max_length=100, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=55, verbose_name='name (plural)')),
                ('nom_relatif', models.CharField(db_index=True, help_text='In lowercase.', max_length=100, verbose_name='nom relatif')),
                ('nom_relatif_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=130, verbose_name='nom relatif (au pluriel)')),
                ('classement', models.SmallIntegerField(db_index=True, default=1, verbose_name='ranking')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedeparente', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_libretto.typedeparente_set', to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parenté',
                'verbose_name_plural': 'types de parentés',
                'unique_together': {('nom', 'nom_relatif')},
            },
        ),
        migrations.CreateModel(
            name='TypeDeParenteDIndividus',
            fields=[
                ('typedeparente_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.typedeparente')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parenté d’individus',
                'verbose_name_plural': 'types de parenté d’individus',
            },
            bases=('libretto.typedeparente',),
        ),
        migrations.CreateModel(
            name='TypeDeParenteDOeuvres',
            fields=[
                ('typedeparente_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.typedeparente')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parenté d’œuvres',
                'verbose_name_plural': 'types de parentés d’œuvres',
            },
            bases=('libretto.typedeparente',),
        ),
        migrations.CreateModel(
            name='TypeDePersonnel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, max_length=100, unique=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedepersonnel', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name': 'type de personnel',
                'verbose_name_plural': 'types de personnel',
            },
        ),
        migrations.CreateModel(
            name='TypeDeSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', autoslug.fields.AutoSlugField(editable=False)),
                ('nom', models.CharField(db_index=True, help_text='In lowercase.', max_length=200, unique=True, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, db_index=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='name (plural)')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedesource', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'ordering': ('slug',),
                'verbose_name': 'type de source',
                'verbose_name_plural': 'types de source',
            },
        ),
        migrations.CreateModel(
            name='SourcePartie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourcepartie_set', to='libretto.partie', verbose_name='rôle ou instrument')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourcepartie_set', to='libretto.source')),
            ],
            options={
                'db_table': 'libretto_source_parties',
                'unique_together': {('source', 'partie')},
            },
        ),
        migrations.CreateModel(
            name='SourceOeuvre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oeuvre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceoeuvre_set', to='libretto.oeuvre', verbose_name='work')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceoeuvre_set', to='libretto.source')),
            ],
            options={
                'db_table': 'libretto_source_oeuvres',
                'unique_together': {('source', 'oeuvre')},
            },
        ),
        migrations.CreateModel(
            name='SourceLieu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lieu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourcelieu_set', to='libretto.lieu', verbose_name='lieu')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourcelieu_set', to='libretto.source')),
            ],
            options={
                'db_table': 'libretto_source_lieux',
                'unique_together': {('source', 'lieu')},
            },
        ),
        migrations.CreateModel(
            name='SourceIndividu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('individu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceindividu_set', to='libretto.individu', verbose_name='individu')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceindividu_set', to='libretto.source')),
            ],
            options={
                'db_table': 'libretto_source_individus',
                'unique_together': {('source', 'individu')},
            },
        ),
        migrations.CreateModel(
            name='SourceEvenement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evenement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceevenement_set', to='libretto.evenement', verbose_name='événement')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceevenement_set', to='libretto.source')),
            ],
            options={
                'db_table': 'libretto_source_evenements',
                'unique_together': {('source', 'evenement')},
            },
        ),
        migrations.CreateModel(
            name='SourceEnsemble',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ensemble', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceensemble_set', to='libretto.ensemble', verbose_name='ensemble')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceensemble_set', to='libretto.source')),
            ],
            options={
                'db_table': 'libretto_source_ensembles',
                'unique_together': {('source', 'ensemble')},
            },
        ),
        migrations.AddField(
            model_name='source',
            name='ensembles',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceEnsemble', to='libretto.Ensemble'),
        ),
        migrations.AddField(
            model_name='source',
            name='etat',
            field=models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état'),
        ),
        migrations.AddField(
            model_name='source',
            name='evenements',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceEvenement', to='libretto.Evenement'),
        ),
        migrations.AddField(
            model_name='source',
            name='individus',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceIndividu', to='libretto.Individu'),
        ),
        migrations.AddField(
            model_name='source',
            name='lieux',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceLieu', to='libretto.Lieu'),
        ),
        migrations.AddField(
            model_name='source',
            name='oeuvres',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceOeuvre', to='libretto.Oeuvre'),
        ),
        migrations.AddField(
            model_name='source',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='source', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='source',
            name='parties',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourcePartie', to='libretto.Partie'),
        ),
        migrations.AddField(
            model_name='source',
            name='type',
            field=models.ForeignKey(help_text='Exemple : « report ».', on_delete=django.db.models.deletion.PROTECT, related_name='sources', to='libretto.typedesource', verbose_name='type'),
        ),
        migrations.CreateModel(
            name='Pupitre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soliste', models.NullBooleanField(db_index=True, default=False, verbose_name='soliste')),
                ('quantite_min', models.IntegerField(db_index=True, default=1, verbose_name='quantité minimale')),
                ('quantite_max', models.IntegerField(db_index=True, default=1, verbose_name='quantité maximale')),
                ('oeuvre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pupitres', to='libretto.oeuvre', verbose_name='work')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pupitre', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('partie', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pupitres', to='libretto.partie', verbose_name='rôle ou instrument')),
            ],
            options={
                'ordering': ('partie',),
                'verbose_name': 'pupitre',
                'verbose_name_plural': 'pupitres',
            },
        ),
        migrations.CreateModel(
            name='Personnel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagements', models.ManyToManyField(db_index=True, related_name='personnels', to='libretto.Engagement')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='personnel', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('saison', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='personnels', to='libretto.saison')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='personnels', to='libretto.typedepersonnel')),
            ],
            options={
                'verbose_name': 'personnel',
                'verbose_name_plural': 'personnels',
            },
        ),
        migrations.AddField(
            model_name='partie',
            name='professions',
            field=models.ManyToManyField(blank=True, db_index=True, help_text='La ou les profession(s) capable(s) de jouer ce rôle ou cet instrument.', null=True, related_name='parties', to='libretto.Profession', verbose_name='occupations'),
        ),
        migrations.CreateModel(
            name='ParenteDOeuvres',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fille', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parentes_meres', to='libretto.oeuvre', verbose_name='œuvre fille')),
                ('mere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parentes_filles', to='libretto.oeuvre', verbose_name='œuvre mère')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parentedoeuvres', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parentes', to='libretto.typedeparentedoeuvres', verbose_name='type')),
            ],
            options={
                'ordering': ('type',),
                'verbose_name': 'parenté d’œuvres',
                'verbose_name_plural': 'parentés d’œuvres',
                'unique_together': {('type', 'mere', 'fille')},
            },
        ),
        migrations.CreateModel(
            name='ParenteDIndividus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enfant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parentes', to='libretto.individu', verbose_name='individu enfant')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parentedindividus', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='enfances', to='libretto.individu', verbose_name='individu parent')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parentes', to='libretto.typedeparentedindividus', verbose_name='type')),
            ],
            options={
                'ordering': ('type', 'parent', 'enfant'),
                'verbose_name': 'parenté d’individus',
                'verbose_name_plural': 'parentés d’individus',
            },
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='filles',
            field=models.ManyToManyField(blank=True, null=True, related_name='meres', through='libretto.ParenteDOeuvres', to='libretto.Oeuvre'),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='genre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='oeuvres', to='libretto.genredoeuvre', verbose_name='genre'),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='oeuvre', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.CreateModel(
            name='Membre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.DateField(blank=True, null=True, verbose_name='début')),
                ('debut_precision', models.PositiveSmallIntegerField(choices=[(0, 'Année'), (1, 'Mois'), (2, 'Jour')], default=0, verbose_name='précision du début')),
                ('fin', models.DateField(blank=True, null=True, verbose_name='fin')),
                ('fin_precision', models.PositiveSmallIntegerField(choices=[(0, 'Année'), (1, 'Mois'), (2, 'Jour')], default=0, verbose_name='précision de la fin')),
                ('classement', models.SmallIntegerField(default=1)),
                ('ensemble', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membres', to='libretto.ensemble', verbose_name='ensemble')),
                ('individu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membres', to='libretto.individu', verbose_name='individu')),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='membres', to='libretto.instrument', verbose_name='instrument')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='membre', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'ordering': ('instrument', 'classement'),
                'verbose_name': 'membre',
                'verbose_name_plural': 'membres',
            },
        ),
        migrations.AddField(
            model_name='lieu',
            name='nature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lieux', to='libretto.naturedelieu', verbose_name='nature'),
        ),
        migrations.AddField(
            model_name='lieu',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lieu', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='lieu',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.lieu', verbose_name='parent'),
        ),
        migrations.AddField(
            model_name='lieu',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_libretto.lieu_set', to='contenttypes.contenttype'),
        ),
        migrations.AlterUniqueTogether(
            name='lieu',
            unique_together={('nom', 'parent')},
        ),
        migrations.AlterIndexTogether(
            name='lieu',
            index_together={('tree_id', 'level', 'lft', 'rght')},
        ),
        migrations.AddField(
            model_name='individu',
            name='deces_lieu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='individu_deces_set', to='libretto.lieu', verbose_name='lieu'),
        ),
        migrations.AddField(
            model_name='individu',
            name='enfants',
            field=models.ManyToManyField(related_name='parents', through='libretto.ParenteDIndividus', to='libretto.Individu'),
        ),
        migrations.AddField(
            model_name='individu',
            name='etat',
            field=models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état'),
        ),
        migrations.AddField(
            model_name='individu',
            name='naissance_lieu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='individu_naissance_set', to='libretto.lieu', verbose_name='lieu'),
        ),
        migrations.AddField(
            model_name='individu',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='individu', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='individu',
            name='professions',
            field=models.ManyToManyField(blank=True, null=True, related_name='individus', to='libretto.Profession', verbose_name='occupations'),
        ),
        migrations.CreateModel(
            name='Fichier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fichier', models.FileField(upload_to='files/')),
                ('folio', models.CharField(blank=True, max_length=10)),
                ('page', models.CharField(blank=True, max_length=10)),
                ('type', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'autre'), (1, 'image'), (2, 'audio'), (3, 'vidéo')], null=True)),
                ('format', models.CharField(blank=True, max_length=10)),
                ('width', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='largeur')),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='hauteur')),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='durée (en secondes)')),
                ('position', models.PositiveSmallIntegerField(verbose_name='position')),
                ('extract', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='extract_from', to='libretto.fichier', verbose_name='extrait')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fichier', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fichiers', to='libretto.source')),
            ],
            options={
                'ordering': ('position',),
                'verbose_name': 'fichier',
                'verbose_name_plural': 'fichiers',
            },
        ),
        migrations.AddField(
            model_name='evenement',
            name='debut_lieu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='evenement_debut_set', to='libretto.lieu', verbose_name='lieu'),
        ),
        migrations.AddField(
            model_name='evenement',
            name='etat',
            field=models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état'),
        ),
        migrations.AddField(
            model_name='evenement',
            name='fin_lieu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='evenement_fin_set', to='libretto.lieu', verbose_name='lieu'),
        ),
        migrations.AddField(
            model_name='evenement',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='evenement', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='ensemble',
            name='etat',
            field=models.ForeignKey(default=libretto.models.base._get_default_etat, on_delete=django.db.models.deletion.PROTECT, to='libretto.etat', verbose_name='état'),
        ),
        migrations.AddField(
            model_name='ensemble',
            name='individus',
            field=models.ManyToManyField(related_name='ensembles', through='libretto.Membre', to='libretto.Individu'),
        ),
        migrations.AddField(
            model_name='ensemble',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ensemble', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='ensemble',
            name='siege',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ensembles', to='libretto.lieu', verbose_name='siège'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='individus',
            field=models.ManyToManyField(db_index=True, related_name='engagements', to='libretto.Individu'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='engagement', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='profession',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='engagements', to='libretto.profession'),
        ),
        migrations.CreateModel(
            name='ElementDeProgramme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('autre', models.CharField(blank=True, db_index=True, max_length=500)),
                ('numerotation', models.CharField(choices=[('O', 'Numéros'), ('B', 'Numéros entre crochets (supposition)'), ('U', 'Puce'), ('E', 'Absente (entracte, etc)')], default='O', max_length=1, verbose_name='numérotation')),
                ('position', models.PositiveSmallIntegerField(db_index=True, verbose_name='position')),
                ('part_d_auteur', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='P. A.')),
                ('caracteristiques', models.ManyToManyField(blank=True, null=True, related_name='elements_de_programme', to='libretto.CaracteristiqueDeProgramme', verbose_name='caractéristiques')),
                ('distribution', models.ManyToManyField(blank=True, null=True, related_name='elements_de_programme', to='libretto.ElementDeDistribution')),
                ('evenement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programme', to='libretto.evenement', verbose_name='événement')),
                ('oeuvre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_programme', to='libretto.oeuvre', verbose_name='work')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elementdeprogramme', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('personnels', models.ManyToManyField(blank=True, null=True, related_name='elements_de_programme', to='libretto.Personnel')),
            ],
            options={
                'ordering': ('position',),
                'verbose_name': 'élément de programme',
                'verbose_name_plural': 'éléments de programme',
            },
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='ensemble',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_distribution', to='libretto.ensemble', verbose_name='ensemble'),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='evenement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='distribution', to='libretto.evenement', verbose_name='événement'),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='individu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_distribution', to='libretto.individu', verbose_name='individu'),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elementdedistribution', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='partie',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_distribution', to='libretto.partie', verbose_name='rôle ou instrument'),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='profession',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_distribution', to='libretto.profession', verbose_name='occupations'),
        ),
        migrations.AddField(
            model_name='caracteristique',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='caracteristiques', to='libretto.typedecaracteristique', verbose_name='type'),
        ),
        migrations.CreateModel(
            name='Auteur',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('individu', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='auteurs', to='libretto.individu', verbose_name='individu')),
                ('oeuvre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auteurs', to='libretto.oeuvre', verbose_name='work')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='auteur', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('profession', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='auteurs', to='libretto.profession', verbose_name='occupations')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auteurs', to='libretto.source', verbose_name='source')),
            ],
            options={
                'ordering': ('profession', 'individu'),
                'verbose_name': 'author',
                'verbose_name_plural': 'authors',
            },
        ),
        migrations.CreateModel(
            name='TypeDEnsemble',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(help_text='In lowercase.', max_length=30, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=30, verbose_name='nom pluriel')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedensemble', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.typedensemble', verbose_name='parent')),
            ],
            options={
                'ordering': ('nom',),
                'verbose_name': 'type d’ensemble',
                'verbose_name_plural': 'types d’ensemble',
            },
        ),
        migrations.AddField(
            model_name='ensemble',
            name='type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ensembles', to='libretto.typedensemble'),
        ),
        migrations.RemoveField(
            model_name='caracteristiquedensemble',
            name='caracteristique_ptr',
        ),
        migrations.DeleteModel(
            name='TypeDeCaracteristiqueDEnsemble',
        ),
        migrations.RemoveField(
            model_name='ensemble',
            name='caracteristiques',
        ),
        migrations.DeleteModel(
            name='CaracteristiqueDEnsemble',
        ),
        migrations.AlterField(
            model_name='elementdedistribution',
            name='evenement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='distribution', to='libretto.evenement', verbose_name='événement'),
        ),
        migrations.RemoveField(
            model_name='evenement',
            name='code_programme',
        ),
        migrations.RemoveField(
            model_name='evenement',
            name='exoneres',
        ),
        migrations.RemoveField(
            model_name='evenement',
            name='frequentation',
        ),
        migrations.RemoveField(
            model_name='evenement',
            name='jauge',
        ),
        migrations.RemoveField(
            model_name='evenement',
            name='payantes',
        ),
        migrations.RemoveField(
            model_name='evenement',
            name='scolaires',
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='code_postal',
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='type_de_scene',
        ),
        migrations.AlterField(
            model_name='elementdeprogramme',
            name='oeuvre',
            field=models.ForeignKey(blank=True, help_text='Vous pouvez croiser le titre et le nom des auteurs. Évitez les termes généraux comme «\xa0de\xa0», «\xa0la\xa0», «\xa0le\xa0», «\xa0avec\xa0».', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_programme', to='libretto.oeuvre', verbose_name='work'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_date_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_heure_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_lieu_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_date_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_heure_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_lieu_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='deces_date_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='deces_lieu_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='naissance_date_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='naissance_lieu_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_date_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_heure_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_lieu_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='type_extrait',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'acte'), (2, 'tableau'), (3, 'scène'), (4, 'morceau chanté'), (5, 'partie d’oratorio'), (6, 'livre'), (7, 'album'), (8, 'volume'), (9, 'cahier'), (10, 'ordre'), (11, 'mouvement'), (12, 'pièce de recueil')], db_index=True, null=True, verbose_name='type d’extrait'),
        ),
        migrations.AlterField(
            model_name='source',
            name='date_approx',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AddField(
            model_name='lieu',
            name='is_institution',
            field=models.BooleanField(default=False, verbose_name='institution'),
        ),
        migrations.DeleteModel(
            name='Institution',
        ),
        migrations.DeleteModel(
            name='LieuDivers',
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='polymorphic_ctype',
        ),
        migrations.AlterModelOptions(
            name='pupitre',
            options={'ordering': ('-soliste', 'partie'), 'verbose_name': 'pupitre', 'verbose_name_plural': 'pupitres'},
        ),
        migrations.AlterField(
            model_name='elementdeprogramme',
            name='autre',
            field=models.CharField(blank=True, max_length=500),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='individus',
            field=models.ManyToManyField(related_name='engagements', to='libretto.Individu'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='circonstance',
            field=models.CharField(blank=True, max_length=500, verbose_name='circonstance'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_heure_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_heure_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='deces_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='deces_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='naissance_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='naissance_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_heure_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si l’heure est imprécise.', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou institution) est imprécis(e).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='professions',
            field=models.ManyToManyField(blank=True, help_text='La ou les profession(s) capable(s) de jouer ce rôle ou cet instrument.', null=True, related_name='parties', to='libretto.Profession', verbose_name='occupations'),
        ),
        migrations.AlterField(
            model_name='personnel',
            name='engagements',
            field=models.ManyToManyField(related_name='personnels', to='libretto.Engagement'),
        ),
        migrations.AlterField(
            model_name='pupitre',
            name='quantite_max',
            field=models.IntegerField(default=1, verbose_name='quantité maximale'),
        ),
        migrations.AlterField(
            model_name='pupitre',
            name='quantite_min',
            field=models.IntegerField(default=1, verbose_name='quantité minimale'),
        ),
        migrations.AlterField(
            model_name='source',
            name='date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est imprécise.', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='arrangement',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'transcription'), (2, 'orchestration')], db_index=True, null=True, verbose_name='arrangement'),
        ),
        migrations.RemoveField(
            model_name='caracteristiquedoeuvre',
            name='caracteristique_ptr',
        ),
        migrations.DeleteModel(
            name='TypeDeCaracteristiqueDOeuvre',
        ),
        migrations.RemoveField(
            model_name='oeuvre',
            name='caracteristiques',
        ),
        migrations.DeleteModel(
            name='CaracteristiqueDOeuvre',
        ),
        migrations.AlterField(
            model_name='Evenement',
            name='caracteristiques',
            field=models.ManyToManyField(blank=True, null=True, related_name='evenements', to='Caracteristique', verbose_name='caractéristiques'),
        ),
        migrations.AlterField(
            model_name='ElementDeProgramme',
            name='caracteristiques',
            field=models.ManyToManyField(blank=True, null=True, related_name='elements_de_programme', to='Caracteristique', verbose_name='caractéristiques'),
        ),
        migrations.DeleteModel(
            name='CaracteristiqueDeProgramme',
        ),
        migrations.DeleteModel(
            name='TypeDeCaracteristiqueDeProgramme',
        ),
        migrations.RemoveField(
            model_name='Caracteristique',
            name='polymorphic_ctype',
        ),
        migrations.RemoveField(
            model_name='TypeDeCaracteristique',
            name='polymorphic_ctype',
        ),
        migrations.RenameModel(
            old_name='Caracteristique',
            new_name='CaracteristiqueDeProgramme',
        ),
        migrations.RenameModel(
            old_name='TypeDeCaracteristique',
            new_name='TypeDeCaracteristiqueDeProgramme',
        ),
        migrations.AlterUniqueTogether(
            name='caracteristiquedeprogramme',
            unique_together={('type', 'valeur')},
        ),
        migrations.AlterModelOptions(
            name='caracteristiquedeprogramme',
            options={'ordering': ('type', 'classement', 'valeur'), 'verbose_name': 'caractéristique de programme', 'verbose_name_plural': 'caractéristiques de programme'},
        ),
        migrations.AlterModelOptions(
            name='typedecaracteristiquedeprogramme',
            options={'ordering': ('classement',), 'verbose_name': 'type de caractéristique de programme', 'verbose_name_plural': 'types de caractéristique de programme'},
        ),
        migrations.AlterField(
            model_name='caracteristiquedeprogramme',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='caracteristiquedeprogramme', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AlterField(
            model_name='typedecaracteristiquedeprogramme',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedecaracteristiquedeprogramme', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AlterModelOptions(
            name='oeuvre',
            options={'ordering': ('type_extrait', 'numero_extrait', 'titre', 'genre', 'numero', 'coupe', 'incipit', 'tempo', 'tonalite', 'sujet', 'arrangement', 'surnom', 'nom_courant', 'opus', 'ict'), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'œuvre', 'verbose_name_plural': 'œuvres'},
        ),
        migrations.RemoveField(
            model_name='partie',
            name='level',
        ),
        migrations.RemoveField(
            model_name='partie',
            name='lft',
        ),
        migrations.RemoveField(
            model_name='partie',
            name='rght',
        ),
        migrations.RemoveField(
            model_name='partie',
            name='tree_id',
        ),
        migrations.RemoveField(
            model_name='profession',
            name='level',
        ),
        migrations.RemoveField(
            model_name='profession',
            name='lft',
        ),
        migrations.RemoveField(
            model_name='profession',
            name='rght',
        ),
        migrations.RemoveField(
            model_name='profession',
            name='tree_id',
        ),
        migrations.RemoveField(
            model_name='typedensemble',
            name='level',
        ),
        migrations.RemoveField(
            model_name='typedensemble',
            name='lft',
        ),
        migrations.RemoveField(
            model_name='typedensemble',
            name='rght',
        ),
        migrations.RemoveField(
            model_name='typedensemble',
            name='tree_id',
        ),
        migrations.AlterField(
            model_name='partie',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfant', to='libretto.partie', verbose_name='rôle ou instrument parent'),
        ),
        migrations.AlterField(
            model_name='profession',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.profession', verbose_name='parent'),
        ),
        migrations.AlterField(
            model_name='typedensemble',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.typedensemble', verbose_name='parent'),
        ),
        migrations.CreateModel(
            name='TypeDeParenteDIndividus2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, help_text='In lowercase.', max_length=100, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=55, verbose_name='name (plural)')),
                ('nom_relatif', models.CharField(db_index=True, help_text='In lowercase.', max_length=100, verbose_name='nom relatif')),
                ('nom_relatif_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=130, verbose_name='nom relatif (au pluriel)')),
                ('classement', models.SmallIntegerField(db_index=True, default=1, verbose_name='ranking')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedeparentedindividus2', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parenté d’individus',
                'verbose_name_plural': 'types de parenté d’individus',
            },
        ),
        migrations.CreateModel(
            name='TypeDeParenteDOeuvres2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, help_text='In lowercase.', max_length=100, verbose_name='name')),
                ('nom_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=55, verbose_name='name (plural)')),
                ('nom_relatif', models.CharField(db_index=True, help_text='In lowercase.', max_length=100, verbose_name='nom relatif')),
                ('nom_relatif_pluriel', models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=130, verbose_name='nom relatif (au pluriel)')),
                ('classement', models.SmallIntegerField(db_index=True, default=1, verbose_name='ranking')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedeparentedoeuvres2', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire')),
            ],
            options={
                'ordering': ('classement',),
                'verbose_name': 'type de parenté d’œuvres',
                'verbose_name_plural': 'types de parentés d’œuvres',
            },
        ),
        migrations.RemoveField(
            model_name='typedeparente',
            name='owner',
        ),
        migrations.RemoveField(
            model_name='typedeparente',
            name='polymorphic_ctype',
        ),
        migrations.RemoveField(
            model_name='typedeparentedoeuvres',
            name='typedeparente_ptr',
        ),
        migrations.AlterField(
            model_name='ParenteDIndividus',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parentes', to='typedeparentedindividus2', verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='ParenteDOeuvres',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parentes', to='typedeparentedoeuvres2', verbose_name='type'),
        ),
        migrations.DeleteModel(
            name='TypeDeParenteDIndividus',
        ),
        migrations.DeleteModel(
            name='TypeDeParenteDOeuvres',
        ),
        migrations.DeleteModel(
            name='TypeDeParente',
        ),
        migrations.RenameModel(
            old_name='TypeDeParenteDIndividus2',
            new_name='TypeDeParenteDIndividus',
        ),
        migrations.RenameModel(
            old_name='TypeDeParenteDOeuvres2',
            new_name='TypeDeParenteDOeuvres',
        ),
        migrations.AlterField(
            model_name='typedeparentedindividus',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedeparentedindividus', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AlterField(
            model_name='typedeparentedoeuvres',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='typedeparentedoeuvres', to=settings.AUTH_USER_MODEL, verbose_name='propriétaire'),
        ),
        migrations.AlterUniqueTogether(
            name='typedeparentedindividus',
            unique_together={('nom', 'nom_relatif')},
        ),
        migrations.AlterUniqueTogether(
            name='typedeparentedoeuvres',
            unique_together={('nom', 'nom_relatif')},
        ),
        migrations.AddField(
            model_name='pupitre',
            name='facultatif',
            field=models.BooleanField(default=False, verbose_name='facultatif'),
        ),
        migrations.RemoveField(
            model_name='engagement',
            name='devise',
        ),
        migrations.DeleteModel(
            name='Devise',
        ),
        migrations.RemoveField(
            model_name='personnel',
            name='engagements',
        ),
        migrations.DeleteModel(
            name='Engagement',
        ),
        migrations.RemoveField(
            model_name='personnel',
            name='owner',
        ),
        migrations.RemoveField(
            model_name='personnel',
            name='saison',
        ),
        migrations.RemoveField(
            model_name='personnel',
            name='type',
        ),
        migrations.DeleteModel(
            name='TypeDePersonnel',
        ),
        migrations.RemoveField(
            model_name='elementdeprogramme',
            name='personnels',
        ),
        migrations.DeleteModel(
            name='Personnel',
        ),
        migrations.AddField(
            model_name='partie',
            name='oeuvre2',
            field=models.ForeignKey(blank=True, help_text='Ne remplir que pour les rôles.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parties', to='libretto.oeuvre', verbose_name='work'),
        ),
        migrations.AddField(
            model_name='partie',
            name='type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'instrument'), (2, 'rôle')], default=0, verbose_name='type'),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name='instrument',
            name='partie_ptr',
        ),
        migrations.DeleteModel(
            name='Role',
        ),
        migrations.RenameField(
            model_name='partie',
            old_name='oeuvre2',
            new_name='oeuvre',
        ),
        migrations.AlterField(
            model_name='membre',
            name='instrument',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='membres', to='libretto.partie', verbose_name='instrument'),
        ),
        migrations.DeleteModel(
            name='Instrument',
        ),
        migrations.AlterField(
            model_name='partie',
            name='type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'instrument'), (2, 'rôle')], db_index=True, verbose_name='type'),
        ),
        migrations.AlterUniqueTogether(
            name='partie',
            unique_together={('nom', 'parent', 'oeuvre')},
        ),
        migrations.RemoveField(
            model_name='partie',
            name='polymorphic_ctype',
        ),
        migrations.AlterModelOptions(
            name='partie',
            options={'ordering': ('type', 'classement', 'nom'), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'rôle ou instrument', 'verbose_name_plural': 'rôles et instruments'},
        ),
        migrations.AlterField(
            model_name='partie',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.partie', verbose_name='rôle ou instrument parent'),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='element_de_programme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='distribution2', to='libretto.elementdeprogramme', verbose_name='élément de programme'),
        ),
        migrations.AlterField(
            model_name='elementdedistribution',
            name='evenement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='distribution', to='libretto.evenement', verbose_name='événement'),
        ),
        migrations.AlterField(
            model_name='pupitre',
            name='facultatif',
            field=models.BooleanField(default=False, verbose_name='ad libitum'),
        ),
        migrations.RemoveField(
            model_name='elementdeprogramme',
            name='distribution',
        ),
        migrations.AlterField(
            model_name='elementdedistribution',
            name='element_de_programme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='distribution', to='libretto.elementdeprogramme', verbose_name='élément de programme'),
        ),
        migrations.RunSQL(
            sql='UPDATE libretto_pupitre SET soliste = TRUE WHERE soliste IS NULL;',
        ),
        migrations.AlterField(
            model_name='pupitre',
            name='soliste',
            field=models.BooleanField(db_index=True, default=False, verbose_name='soliste'),
        ),
        migrations.AlterField(
            model_name='elementdeprogramme',
            name='caracteristiques',
            field=models.ManyToManyField(blank=True, related_name='elements_de_programme', to='libretto.CaracteristiqueDeProgramme', verbose_name='caractéristiques'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='caracteristiques',
            field=models.ManyToManyField(blank=True, related_name='evenements', to='libretto.CaracteristiqueDeProgramme', verbose_name='caractéristiques'),
        ),
        migrations.AlterField(
            model_name='fichier',
            name='type',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'autre'), (1, 'image'), (2, 'audio'), (3, 'vidéo')], db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='genredoeuvre',
            name='parents',
            field=models.ManyToManyField(blank=True, related_name='enfants', to='libretto.GenreDOeuvre'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='professions',
            field=models.ManyToManyField(blank=True, related_name='individus', to='libretto.Profession', verbose_name='occupations'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='filles',
            field=models.ManyToManyField(blank=True, related_name='meres', through='libretto.ParenteDOeuvres', to='libretto.Oeuvre'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='professions',
            field=models.ManyToManyField(blank=True, help_text='La ou les profession(s) capable(s) de jouer ce rôle ou cet instrument.', related_name='parties', to='libretto.Profession', verbose_name='occupations'),
        ),
        migrations.AddField(
            model_name='auteur',
            name='ensemble',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='auteurs', to='libretto.ensemble', verbose_name='ensemble'),
        ),
        migrations.AlterField(
            model_name='auteur',
            name='individu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='auteurs', to='libretto.individu', verbose_name='individu'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='ict',
            field=models.CharField(blank=True, db_index=True, help_text='Indice de Catalogue Thématique. Exemple\xa0: «\xa0RV\xa042\xa0», «\xa0K.\xa0299d\xa0» ou encore «\xa0Hob.\xa0XVI:24\xa0».', max_length=25, verbose_name='ICT'),
        ),
        migrations.RunSQL(
            sql='\n            ALTER TABLE libretto_elementdedistribution\n            ADD CONSTRAINT evenement_xor_elementdeprogramme\n            CHECK ((evenement_id IS NOT NULL) <> (element_de_programme_id IS NOT NULL));\n\n            ALTER TABLE libretto_elementdedistribution\n            ADD CONSTRAINT not_partie_and_profession\n            CHECK (NOT (partie_id IS NOT NULL AND profession_id IS NOT NULL));\n\n            ALTER TABLE libretto_auteur\n            ADD CONSTRAINT oeuvre_xor_source\n            CHECK ((oeuvre_id IS NOT NULL) <> (source_id IS NOT NULL));\n\n            ALTER TABLE libretto_auteur\n            ADD CONSTRAINT individu_xor_ensemble\n            CHECK ((individu_id IS NOT NULL) <> (ensemble_id IS NOT NULL));\n        ',
            reverse_sql='\n            ALTER TABLE libretto_elementdedistribution\n            DROP CONSTRAINT evenement_xor_elementdeprogramme;\n\n            ALTER TABLE libretto_elementdedistribution\n            DROP CONSTRAINT not_partie_and_profession;\n\n            ALTER TABLE libretto_auteur\n            DROP CONSTRAINT oeuvre_xor_source;\n\n            ALTER TABLE libretto_auteur\n            DROP CONSTRAINT individu_xor_ensemble;\n        ',
        ),
        migrations.AlterModelOptions(
            name='auteur',
            options={'ordering': ('profession', 'ensemble', 'individu'), 'verbose_name': 'author', 'verbose_name_plural': 'authors'},
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='creation_type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'genèse'), (2, 'première mondiale'), (3, 'première édition')], null=True, verbose_name='type de création'),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='indeterminee',
            field=models.BooleanField(default=False, help_text='Cocher si l’œuvre n’est pas identifiable, par exemple un quatuor de Haydn, sans savoir lequel.', verbose_name='indéterminée'),
        ),
        migrations.RunSQL(
            sql='\n            DELETE FROM libretto_elementdedistribution\n            WHERE individu_id IS NULL AND ensemble_id IS NULL;\n            ALTER TABLE libretto_elementdedistribution\n            ADD CONSTRAINT individu_xor_ensemble\n            CHECK ((individu_id IS NOT NULL) <> (ensemble_id IS NOT NULL));\n        ',
            reverse_sql='\n            ALTER TABLE libretto_elementdedistribution\n            DROP CONSTRAINT individu_xor_ensemble;\n        ',
        ),
        migrations.AlterModelOptions(
            name='auteur',
            options={'ordering': ('profession', 'ensemble', 'individu'), 'verbose_name': 'auteur', 'verbose_name_plural': 'auteurs'},
        ),
        migrations.AlterModelOptions(
            name='etat',
            options={'ordering': ('slug',), 'verbose_name': 'état', 'verbose_name_plural': 'états'},
        ),
        migrations.AlterModelOptions(
            name='evenement',
            options={'ordering': ('debut_date', 'debut_heure', 'debut_lieu', 'debut_lieu_approx'), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'événement', 'verbose_name_plural': 'événements'},
        ),
        migrations.AlterModelOptions(
            name='individu',
            options={'ordering': ('nom',), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'individu', 'verbose_name_plural': 'individus'},
        ),
        migrations.AlterField(
            model_name='auteur',
            name='oeuvre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auteurs', to='libretto.oeuvre', verbose_name='œuvre'),
        ),
        migrations.AlterField(
            model_name='auteur',
            name='profession',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='auteurs', to='libretto.profession', verbose_name='profession'),
        ),
        migrations.AlterField(
            model_name='caracteristiquedeprogramme',
            name='classement',
            field=models.SmallIntegerField(db_index=True, default=1, help_text='Par exemple, on peut choisir de classer les découpages par nombre d’actes.', verbose_name='classement'),
        ),
        migrations.AlterField(
            model_name='elementdedistribution',
            name='profession',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_distribution', to='libretto.profession', verbose_name='profession'),
        ),
        migrations.AlterField(
            model_name='elementdeprogramme',
            name='oeuvre',
            field=models.ForeignKey(blank=True, help_text='Vous pouvez croiser le titre et le nom des auteurs. Évitez les termes généraux comme «\xa0de\xa0», «\xa0la\xa0», «\xa0le\xa0», «\xa0avec\xa0».', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elements_de_programme', to='libretto.oeuvre', verbose_name='œuvre'),
        ),
        migrations.AlterField(
            model_name='ensemble',
            name='nom',
            field=models.CharField(db_index=True, max_length=75, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='ensemble',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode, unique=True),
        ),
        migrations.AlterField(
            model_name='etat',
            name='nom',
            field=models.CharField(help_text='En minuscules.', max_length=200, unique=True, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='etat',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='etat',
            name='public',
            field=models.BooleanField(db_index=True, default=True, verbose_name='publié'),
        ),
        migrations.AlterField(
            model_name='etat',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode, unique=True),
        ),
        migrations.AlterField(
            model_name='genredoeuvre',
            name='nom',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=255, unique=True, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='genredoeuvre',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=430, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='genredoeuvre',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode),
        ),
        migrations.AlterField(
            model_name='individu',
            name='biographie',
            field=tinymce.models.HTMLField(blank=True, verbose_name='biographie'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='designation',
            field=models.CharField(choices=[('S', 'Standard (nom, prénoms et pseudonyme)'), ('P', 'Pseudonyme (uniquement)'), ('L', 'Nom d’usage (uniquement)'), ('B', 'Nom de naissance (standard)'), ('F', 'Prénom(s) (uniquement)')], default='S', max_length=1, verbose_name='désignation'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='nom',
            field=models.CharField(db_index=True, max_length=200, verbose_name='nom d’usage'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='nom_naissance',
            field=models.CharField(blank=True, db_index=True, help_text='Ne remplir que s’il est différent du nom d’usage.', max_length=200, verbose_name='nom de naissance'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='prenoms',
            field=models.CharField(blank=True, db_index=True, help_text='Exemple : « Antonio ».', max_length=50, verbose_name='prénoms'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='professions',
            field=models.ManyToManyField(blank=True, related_name='individus', to='libretto.Profession', verbose_name='professions'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='pseudonyme',
            field=models.CharField(blank=True, db_index=True, max_length=200, verbose_name='pseudonyme'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode, unique=True),
        ),
        migrations.AlterField(
            model_name='individu',
            name='titre',
            field=models.CharField(blank=True, choices=[('M', 'M.'), ('J', 'Mlle'), ('F', 'Mme')], db_index=True, max_length=1, verbose_name='titre'),
        ),
        migrations.AlterField(
            model_name='lieu',
            name='historique',
            field=tinymce.models.HTMLField(blank=True, verbose_name='historique'),
        ),
        migrations.AlterField(
            model_name='lieu',
            name='nom',
            field=models.CharField(db_index=True, max_length=200, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='lieu',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode, unique=True),
        ),
        migrations.AlterField(
            model_name='naturedelieu',
            name='nom',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=255, unique=True, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='naturedelieu',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=430, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='naturedelieu',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_type',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'genèse (composition, écriture, etc.)'), (2, 'première mondiale'), (3, 'première édition')], null=True, verbose_name='type de création'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='indeterminee',
            field=models.BooleanField(default=False, help_text='Cocher si l’œuvre n’est pas identifiable, par exemple un quatuor de Haydn, sans savoir lequel. <strong>Ne pas utiliser pour un extrait indéterminé</strong>, sélectionner plutôt dans le programme l’œuvre dont il est tiré et joindre une caractéristique le décrivant («\xa0un air\xa0», «\xa0un\xa0mouvement\xa0», etc.).', verbose_name='indéterminée'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode, unique=True),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='tonalite',
            field=models.CharField(blank=True, choices=[('Cc-', 'do bémol majeur'), ('Cc0', 'do majeur'), ('Cc+', 'do dièse majeur'), ('Cd-', 'ré bémol majeur'), ('Cd0', 'ré majeur'), ('Cd+', 'ré dièse majeur'), ('Ce-', 'mi bémol majeur'), ('Ce0', 'mi majeur'), ('Ce+', 'mi dièse majeur'), ('Cf-', 'fa bémol majeur'), ('Cf0', 'fa majeur'), ('Cf+', 'fa dièse majeur'), ('Cg-', 'sol bémol majeur'), ('Cg0', 'sol majeur'), ('Cg+', 'sol dièse majeur'), ('Ca-', 'la bémol majeur'), ('Ca0', 'la majeur'), ('Ca+', 'la dièse majeur'), ('Cb-', 'si bémol majeur'), ('Cb0', 'si majeur'), ('Cb+', 'si dièse majeur'), ('Cu-', 'ut bémol majeur'), ('Cu0', 'ut majeur'), ('Cu+', 'ut dièse majeur'), ('Ac-', 'do bémol mineur'), ('Ac0', 'do mineur'), ('Ac+', 'do dièse mineur'), ('Ad-', 'ré bémol mineur'), ('Ad0', 'ré mineur'), ('Ad+', 'ré dièse mineur'), ('Ae-', 'mi bémol mineur'), ('Ae0', 'mi mineur'), ('Ae+', 'mi dièse mineur'), ('Af-', 'fa bémol mineur'), ('Af0', 'fa mineur'), ('Af+', 'fa dièse mineur'), ('Ag-', 'sol bémol mineur'), ('Ag0', 'sol mineur'), ('Ag+', 'sol dièse mineur'), ('Aa-', 'la bémol mineur'), ('Aa0', 'la mineur'), ('Aa+', 'la dièse mineur'), ('Ab-', 'si bémol mineur'), ('Ab0', 'si mineur'), ('Ab+', 'si dièse mineur'), ('Au-', 'ut bémol mineur'), ('Au0', 'ut mineur'), ('Au+', 'ut dièse mineur'), ('0c-', 'do bémol'), ('0c0', 'do'), ('0c+', 'do dièse'), ('0d-', 'ré bémol'), ('0d0', 'ré'), ('0d+', 'ré dièse'), ('0e-', 'mi bémol'), ('0e0', 'mi'), ('0e+', 'mi dièse'), ('0f-', 'fa bémol'), ('0f0', 'fa'), ('0f+', 'fa dièse'), ('0g-', 'sol bémol'), ('0g0', 'sol'), ('0g+', 'sol dièse'), ('0a-', 'la bémol'), ('0a0', 'la'), ('0a+', 'la dièse'), ('0b-', 'si bémol'), ('0b0', 'si'), ('0b+', 'si dièse'), ('0u-', 'ut bémol'), ('0u0', 'ut'), ('0u+', 'ut dièse')], db_index=True, max_length=3, verbose_name='tonalité'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='type_extrait',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'acte'), (2, 'tableau'), (3, 'scène'), (4, 'morceau chanté'), (5, 'partie'), (6, 'livre'), (7, 'album'), (8, 'volume'), (9, 'cahier'), (10, 'ordre'), (11, 'mouvement'), (12, 'pièce de recueil')], db_index=True, null=True, verbose_name='type d’extrait'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='classement',
            field=models.SmallIntegerField(db_index=True, default=1, verbose_name='classement'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='nom',
            field=models.CharField(db_index=True, help_text='Le nom d’une partie de la partition, instrumentale ou vocale.', max_length=200, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='oeuvre',
            field=models.ForeignKey(blank=True, help_text='Ne remplir que pour les rôles.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parties', to='libretto.oeuvre', verbose_name='œuvre'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='professions',
            field=models.ManyToManyField(blank=True, help_text='La ou les profession(s) capable(s) de jouer ce rôle ou cet instrument.', related_name='parties', to='libretto.Profession', verbose_name='professions'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode, unique=True),
        ),
        migrations.AlterField(
            model_name='profession',
            name='nom',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=200, unique=True, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='profession',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='profession',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode, unique=True),
        ),
        migrations.AlterField(
            model_name='pupitre',
            name='oeuvre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pupitres', to='libretto.oeuvre', verbose_name='œuvre'),
        ),
        migrations.AlterField(
            model_name='source',
            name='legende',
            field=models.CharField(blank=True, max_length=600, verbose_name='légende'),
        ),
        migrations.AlterField(
            model_name='source',
            name='type',
            field=models.ForeignKey(help_text='Exemple : « compte rendu ».', on_delete=django.db.models.deletion.PROTECT, related_name='sources', to='libretto.typedesource', verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='sourceoeuvre',
            name='oeuvre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourceoeuvre_set', to='libretto.oeuvre', verbose_name='œuvre'),
        ),
        migrations.AlterField(
            model_name='typedecaracteristiquedeprogramme',
            name='nom',
            field=models.CharField(db_index=True, help_text='Exemple : « tonalité ».', max_length=200, unique=True, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='typedecaracteristiquedeprogramme',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='typedensemble',
            name='nom',
            field=models.CharField(help_text='En minuscules.', max_length=30, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='typedeparentedindividus',
            name='classement',
            field=models.SmallIntegerField(db_index=True, default=1, verbose_name='classement'),
        ),
        migrations.AlterField(
            model_name='typedeparentedindividus',
            name='nom',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=100, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='typedeparentedindividus',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=55, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='typedeparentedindividus',
            name='nom_relatif',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=100, verbose_name='nom relatif'),
        ),
        migrations.AlterField(
            model_name='typedeparentedoeuvres',
            name='classement',
            field=models.SmallIntegerField(db_index=True, default=1, verbose_name='classement'),
        ),
        migrations.AlterField(
            model_name='typedeparentedoeuvres',
            name='nom',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=100, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='typedeparentedoeuvres',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=55, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='typedeparentedoeuvres',
            name='nom_relatif',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=100, verbose_name='nom relatif'),
        ),
        migrations.AlterField(
            model_name='typedesource',
            name='nom',
            field=models.CharField(db_index=True, help_text='En minuscules.', max_length=200, unique=True, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='typedesource',
            name='nom_pluriel',
            field=models.CharField(blank=True, db_index=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=230, verbose_name='nom (au pluriel)'),
        ),
        migrations.AlterField(
            model_name='typedesource',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='get_slug', slugify=libretto.models.base.slugify_unicode),
        ),
        migrations.AlterModelOptions(
            name='membre',
            options={'ordering': ('instrument', 'classement', 'debut'), 'verbose_name': 'membre', 'verbose_name_plural': 'membres'},
        ),
        migrations.AlterField(
            model_name='elementdeprogramme',
            name='autre',
            field=models.CharField(blank=True, max_length=500, verbose_name='autre'),
        ),
        migrations.AlterField(
            model_name='ensemble',
            name='individus',
            field=models.ManyToManyField(related_name='ensembles', through='libretto.Membre', to='libretto.Individu', verbose_name='individus'),
        ),
        migrations.AlterField(
            model_name='ensemble',
            name='siege',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ensembles', to='libretto.lieu', verbose_name='localisation'),
        ),
        migrations.AlterField(
            model_name='ensemble',
            name='type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ensembles', to='libretto.typedensemble', verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_date',
            field=models.DateField(db_index=True, help_text='Exemple\xa0: « 14/7/1789 » pour le 14 juillet 1789. En cas de date approximative, saisir le premier jour du mois («\xa01/10/1678\xa0» pour octobre 1678) ou de l’année («\xa01/1/1830\xa0» pour 1830).', verbose_name='date'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est approximative. Par exemple\xa0: «\xa01870\xa0», «\xa0octobre 1812\xa0», «\xa0été 1967\xa0».', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_heure',
            field=models.TimeField(blank=True, db_index=True, help_text='Exemple\xa0: « 19:30 » pour 19h30.', null=True, verbose_name='heure'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_heure_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si l’heure est approximative. Par exemple\xa0: «\xa0matinée\xa0», «\xa0soirée\xa0».', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='debut_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou l’institution) est approximatif(ve).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_date',
            field=models.DateField(blank=True, db_index=True, help_text='Exemple\xa0: « 14/7/1789 » pour le 14 juillet 1789. En cas de date approximative, saisir le premier jour du mois («\xa01/10/1678\xa0» pour octobre 1678) ou de l’année («\xa01/1/1830\xa0» pour 1830).', null=True, verbose_name='date'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est approximative. Par exemple\xa0: «\xa01870\xa0», «\xa0octobre 1812\xa0», «\xa0été 1967\xa0».', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_heure',
            field=models.TimeField(blank=True, db_index=True, help_text='Exemple\xa0: « 19:30 » pour 19h30.', null=True, verbose_name='heure'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_heure_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si l’heure est approximative. Par exemple\xa0: «\xa0matinée\xa0», «\xa0soirée\xa0».', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='evenement',
            name='fin_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou l’institution) est approximatif(ve).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='fichier',
            name='fichier',
            field=models.FileField(upload_to='files/', verbose_name='fichier'),
        ),
        migrations.AlterField(
            model_name='fichier',
            name='folio',
            field=models.CharField(blank=True, max_length=10, verbose_name='folio'),
        ),
        migrations.AlterField(
            model_name='fichier',
            name='page',
            field=models.CharField(blank=True, max_length=10, verbose_name='page'),
        ),
        migrations.AlterField(
            model_name='genredoeuvre',
            name='parents',
            field=models.ManyToManyField(blank=True, related_name='enfants', to='libretto.GenreDOeuvre', verbose_name='parents'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='deces_date',
            field=models.DateField(blank=True, db_index=True, help_text='Exemple\xa0: « 14/7/1789 » pour le 14 juillet 1789. En cas de date approximative, saisir le premier jour du mois («\xa01/10/1678\xa0» pour octobre 1678) ou de l’année («\xa01/1/1830\xa0» pour 1830).', null=True, verbose_name='date'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='deces_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est approximative. Par exemple\xa0: «\xa01870\xa0», «\xa0octobre 1812\xa0», «\xa0été 1967\xa0».', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='deces_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou l’institution) est approximatif(ve).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='designation',
            field=models.CharField(choices=[('S', 'Standard (nom, prénoms et pseudonyme)'), ('P', 'Pseudonyme (uniquement)'), ('L', 'Nom d’usage (uniquement)'), ('B', 'Nom de naissance (standard)'), ('F', 'Prénom(s) (uniquement)')], default='S', max_length=1, verbose_name='affichage'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='enfants',
            field=models.ManyToManyField(related_name='parents', through='libretto.ParenteDIndividus', to='libretto.Individu', verbose_name='enfants'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='naissance_date',
            field=models.DateField(blank=True, db_index=True, help_text='Exemple\xa0: « 14/7/1789 » pour le 14 juillet 1789. En cas de date approximative, saisir le premier jour du mois («\xa01/10/1678\xa0» pour octobre 1678) ou de l’année («\xa01/1/1830\xa0» pour 1830).', null=True, verbose_name='date'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='naissance_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est approximative. Par exemple\xa0: «\xa01870\xa0», «\xa0octobre 1812\xa0», «\xa0été 1967\xa0».', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='individu',
            name='naissance_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou l’institution) est approximatif(ve).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='lieu',
            name='geometry',
            field=django.contrib.gis.db.models.fields.GeometryField(blank=True, db_index=True, null=True, srid=4326, verbose_name='géo-positionnement'),
        ),
        migrations.AlterField(
            model_name='membre',
            name='classement',
            field=models.SmallIntegerField(default=1, verbose_name='classement'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_date',
            field=models.DateField(blank=True, db_index=True, help_text='Exemple\xa0: « 14/7/1789 » pour le 14 juillet 1789. En cas de date approximative, saisir le premier jour du mois («\xa01/10/1678\xa0» pour octobre 1678) ou de l’année («\xa01/1/1830\xa0» pour 1830).', null=True, verbose_name='date'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est approximative. Par exemple\xa0: «\xa01870\xa0», «\xa0octobre 1812\xa0», «\xa0été 1967\xa0».', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_heure',
            field=models.TimeField(blank=True, db_index=True, help_text='Exemple\xa0: « 19:30 » pour 19h30.', null=True, verbose_name='heure'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_heure_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si l’heure est approximative. Par exemple\xa0: «\xa0matinée\xa0», «\xa0soirée\xa0».', max_length=30, verbose_name='heure (approximative)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='creation_lieu_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si le lieu (ou l’institution) est approximatif(ve).', max_length=50, verbose_name='lieu (approximatif)'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='filles',
            field=models.ManyToManyField(blank=True, related_name='meres', through='libretto.ParenteDOeuvres', to='libretto.Oeuvre', verbose_name='filles'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='opus',
            field=models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa012\xa0» pour op.\xa012, «\xa027/3\xa0» pour op.\xa027 n°\xa03, «\xa08b\xa0» pour op.\xa08\u202fb, ou encore «\xa012-15\xa0» pour op.\xa012 à\xa015.', max_length=6, validators=[django.core.validators.RegexValidator('^[\\d\\w\\-/]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentuées, tiret et barre oblique, le tout sans espace.')], verbose_name='opus'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='tempo',
            field=models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa0Largo\xa0», «\xa0Presto ma non troppo\xa0», etc. Ne pas saisir d’indication métronomique.', max_length=50, verbose_name='tempo'),
        ),
        migrations.AlterField(
            model_name='profession',
            name='classement',
            field=models.SmallIntegerField(db_index=True, default=1, verbose_name='classement'),
        ),
        migrations.AlterField(
            model_name='saison',
            name='debut',
            field=models.DateField(help_text='Exemple\xa0: « 14/7/1789 » pour le 14 juillet 1789.', verbose_name='début'),
        ),
        migrations.AlterField(
            model_name='source',
            name='date',
            field=models.DateField(blank=True, db_index=True, help_text='Exemple\xa0: « 14/7/1789 » pour le 14 juillet 1789. En cas de date approximative, saisir le premier jour du mois («\xa01/10/1678\xa0» pour octobre 1678) ou de l’année («\xa01/1/1830\xa0» pour 1830).', null=True, verbose_name='date'),
        ),
        migrations.AlterField(
            model_name='source',
            name='date_approx',
            field=models.CharField(blank=True, help_text='Ne remplir que si la date est approximative. Par exemple\xa0: «\xa01870\xa0», «\xa0octobre 1812\xa0», «\xa0été 1967\xa0».', max_length=60, verbose_name='date (approximative)'),
        ),
        migrations.AlterField(
            model_name='source',
            name='ensembles',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceEnsemble', to='libretto.Ensemble', verbose_name='ensembles'),
        ),
        migrations.AlterField(
            model_name='source',
            name='evenements',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceEvenement', to='libretto.Evenement', verbose_name='événements'),
        ),
        migrations.AlterField(
            model_name='source',
            name='folio',
            field=models.CharField(blank=True, help_text='Sans «\xa0f.\xa0». Exemple\xa0: «\xa03\xa0».', max_length=10, verbose_name='folio'),
        ),
        migrations.AlterField(
            model_name='source',
            name='individus',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceIndividu', to='libretto.Individu', verbose_name='individus'),
        ),
        migrations.AlterField(
            model_name='source',
            name='legende',
            field=models.CharField(blank=True, help_text='Recommandée pour les images.', max_length=600, verbose_name='légende'),
        ),
        migrations.AlterField(
            model_name='source',
            name='lieux',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceLieu', to='libretto.Lieu', verbose_name='lieux'),
        ),
        migrations.AlterField(
            model_name='source',
            name='oeuvres',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourceOeuvre', to='libretto.Oeuvre', verbose_name='œuvres'),
        ),
        migrations.AlterField(
            model_name='source',
            name='parties',
            field=models.ManyToManyField(related_name='sources', through='libretto.SourcePartie', to='libretto.Partie', verbose_name='sources'),
        ),
        migrations.AlterField(
            model_name='source',
            name='transcription',
            field=tinymce.models.HTMLField(blank=True, help_text='Recopier la source ou un extrait en suivant les règles définies dans <a href="/examens/source/">le didacticiel.</a>', verbose_name='transcription'),
        ),
        migrations.AlterField(
            model_name='source',
            name='url',
            field=models.URLField(blank=True, help_text='Uniquement un permalien extérieur à Dezède.', verbose_name='URL'),
        ),
        migrations.AlterField(
            model_name='typedecaracteristiquedeprogramme',
            name='classement',
            field=models.SmallIntegerField(default=1, verbose_name='classement'),
        ),
        migrations.AlterField(
            model_name='source',
            name='cote',
            field=models.CharField(blank=True, db_index=True, max_length=60, verbose_name='cote'),
        ),
        migrations.AlterField(
            model_name='source',
            name='transcription',
            field=tinymce.models.HTMLField(blank=True, help_text='Recopier la source ou un extrait en suivant les règles définies dans <a href="/examens/source">le didacticiel.</a>', verbose_name='transcription'),
        ),
        migrations.AlterModelOptions(
            name='ensemble',
            options={'ordering': ('nom',), 'verbose_name': 'ensemble', 'verbose_name_plural': 'ensembles'},
        ),
        migrations.AlterField(
            model_name='typedensemble',
            name='nom',
            field=models.CharField(help_text='En minuscules.', max_length=40, verbose_name='nom'),
        ),
        migrations.AlterField(
            model_name='typedensemble',
            name='nom_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=45, verbose_name='nom pluriel'),
        ),
        migrations.AddField(
            model_name='profession',
            name='nom_feminin_pluriel',
            field=models.CharField(blank=True, help_text='À remplir si le pluriel n’est pas un simple ajout de « s ». Exemple : « animal » devient « animaux » et non « animals ».', max_length=250, verbose_name='nom (au féminin pluriel)'),
        ),
        migrations.RemoveField(
            model_name='oeuvre',
            name='level',
        ),
        migrations.RemoveField(
            model_name='oeuvre',
            name='lft',
        ),
        migrations.RemoveField(
            model_name='oeuvre',
            name='rght',
        ),
        migrations.RemoveField(
            model_name='oeuvre',
            name='tree_id',
        ),
        migrations.AddField(
            model_name='lieu',
            name='path',
            field=tree.fields.PathField(db_index=True, order_by=['nom']),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='path',
            field=tree.fields.PathField(db_index=True, order_by=['type_extrait', 'numero_extrait', 'titre', 'genre', 'numero', 'coupe', 'incipit', 'tempo', 'tonalite', 'sujet', 'arrangement', 'surnom', 'nom_courant', 'opus', 'ict'], parent_field_name='extrait_de'),
        ),
        migrations.AlterField(
            model_name='lieu',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.lieu', verbose_name='parent'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='extrait_de',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enfants', to='libretto.oeuvre', verbose_name='extrait de'),
        ),
        migrations.AlterField(
            model_name='partie',
            name='professions',
            field=models.ManyToManyField(blank=True, related_name='parties', to='libretto.Profession', verbose_name='professions'),
        ),
        migrations.AlterIndexTogether(
            name='lieu',
            index_together=set(),
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='level',
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='lft',
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='rght',
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='tree_id',
        ),
        tree.operations.CreateTreeTrigger(
            model_lookup='lieu',
        ),
        tree.operations.RebuildPaths(
            model_lookup='lieu',
        ),
        tree.operations.CreateTreeTrigger(
            model_lookup='oeuvre',
        ),
        tree.operations.RebuildPaths(
            model_lookup='oeuvre',
        ),
        migrations.AlterModelOptions(
            name='lieu',
            options={'ordering': ('path',), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'lieu ou institution', 'verbose_name_plural': 'lieux et institutions'},
        ),
        migrations.AlterModelOptions(
            name='oeuvre',
            options={'ordering': ('path',), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'œuvre', 'verbose_name_plural': 'œuvres'},
        ),
        migrations.AddField(
            model_name='ensemble',
            name='isni',
            field=models.CharField(blank=True, help_text='Exemple\xa0: «\xa00000000115201575\xa0» pour Le Poème Harmonique.', max_length=16, validators=[django.core.validators.MinLengthValidator(16), django.core.validators.RegexValidator('^\\d{15}[\\dxX]$', 'Numéro d’ISNI invalide.')], verbose_name='Identifiant ISNI'),
        ),
        migrations.AddField(
            model_name='ensemble',
            name='sans_isni',
            field=models.BooleanField(default=False, verbose_name='sans ISNI'),
        ),
        migrations.AddField(
            model_name='individu',
            name='sans_isni',
            field=models.BooleanField(default=False, verbose_name='sans ISNI'),
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.source')),
                ('fichier_ogg', models.FileField(blank=True, editable=False, upload_to='files/ogg/', verbose_name='fichier (OGG)')),
                ('fichier_mpeg', models.FileField(blank=True, editable=False, upload_to='files/mpeg/', verbose_name='fichier (MPEG)')),
                ('extrait', models.FileField(blank=True, upload_to='files/extraits/', verbose_name='extrait')),
                ('extrait_ogg', models.FileField(blank=True, editable=False, upload_to='files/extraits/ogg/', verbose_name='extrait (OGG)')),
                ('extrait_mpeg', models.FileField(blank=True, editable=False, upload_to='files/extraits/mpeg/', verbose_name='extrait (MPEG)')),
                ('format', models.CharField(blank=True, editable=False, max_length=10, verbose_name='format')),
                ('format_extrait', models.CharField(blank=True, editable=False, max_length=10, verbose_name='format de l’extrait')),
                ('duree', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée de l’extrait (en secondes)')),
                ('duree_extrait', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée extrait (en secondes)')),
            ],
            options={
                'verbose_name': 'audio',
                'verbose_name_plural': 'audios',
            },
            bases=('libretto.source',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='libretto.source')),
                ('fichier_ogg', models.FileField(blank=True, editable=False, upload_to='files/ogg/', verbose_name='fichier (OGG)')),
                ('fichier_mpeg', models.FileField(blank=True, editable=False, upload_to='files/mpeg/', verbose_name='fichier (MPEG)')),
                ('extrait', models.FileField(blank=True, upload_to='files/extraits/', verbose_name='extrait')),
                ('extrait_ogg', models.FileField(blank=True, editable=False, upload_to='files/extraits/ogg/', verbose_name='extrait (OGG)')),
                ('extrait_mpeg', models.FileField(blank=True, editable=False, upload_to='files/extraits/mpeg/', verbose_name='extrait (MPEG)')),
                ('format', models.CharField(blank=True, editable=False, max_length=10, verbose_name='format')),
                ('format_extrait', models.CharField(blank=True, editable=False, max_length=10, verbose_name='format de l’extrait')),
                ('duree', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée de l’extrait (en secondes)')),
                ('duree_extrait', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée extrait (en secondes)')),
                ('largeur', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='largeur')),
                ('hauteur', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='hauteur')),
                ('largeur_extrait', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='largeur de l’extrait')),
                ('hauteur_extrait', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='hauteur de l’extrait')),
            ],
            options={
                'verbose_name': 'vidéo',
                'verbose_name_plural': 'vidéos',
            },
            bases=('libretto.source',),
        ),
        migrations.AlterModelOptions(
            name='source',
            options={'ordering': ('parent', 'position', 'date', 'titre', 'numero', 'page', 'lieu_conservation', 'cote'), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'source', 'verbose_name_plural': 'sources'},
        ),
        migrations.AddField(
            model_name='source',
            name='fichier',
            field=models.FileField(blank=True, upload_to='files/', verbose_name='fichier'),
        ),
        migrations.AddField(
            model_name='source',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='libretto.source', verbose_name='parent'),
        ),
        migrations.AddField(
            model_name='source',
            name='position',
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='position'),
        ),
        migrations.AddField(
            model_name='source',
            name='type_fichier',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'autre'), (1, 'image'), (2, 'audio'), (3, 'vidéo')], db_index=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='type_extrait',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'acte'), (2, 'tableau'), (3, 'scène'), (4, 'morceau chanté'), (5, 'partie'), (6, 'livre'), (7, 'album'), (8, 'volume'), (9, 'cahier'), (10, 'ordre'), (11, 'mouvement'), (12, 'pièce de recueil'), (13, 'série')], db_index=True, null=True, verbose_name='type d’extrait'),
        ),
        migrations.AlterModelOptions(
            name='source',
            options={'ordering': ('date', 'titre', 'numero', 'page', 'lieu_conservation', 'cote'), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'source', 'verbose_name_plural': 'sources'},
        ),
        migrations.DeleteModel(
            name='Fichier',
        ),
        migrations.AddField(
            model_name='source',
            name='est_promu',
            field=models.BooleanField(default=False, verbose_name='est dans la bibliothèque'),
        ),
        migrations.AlterField(
            model_name='audio',
            name='duree',
            field=models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée (en secondes)'),
        ),
        migrations.AlterField(
            model_name='audio',
            name='duree_extrait',
            field=models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée de l’extrait (en secondes)'),
        ),
        migrations.AlterField(
            model_name='source',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='À remplir par exemple si la source est une page d’un recueil déjà existant ou un tome d’une série.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='libretto.source', verbose_name='parent'),
        ),
        migrations.AlterField(
            model_name='source',
            name='position',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Position au sein de son parent.', null=True, verbose_name='position'),
        ),
        migrations.AlterField(
            model_name='video',
            name='duree',
            field=models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée (en secondes)'),
        ),
        migrations.AlterField(
            model_name='video',
            name='duree_extrait',
            field=models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='durée de l’extrait (en secondes)'),
        ),
        migrations.AlterModelOptions(
            name='source',
            options={'ordering': ('date', 'titre', 'numero', 'parent__date', 'parent__titre', 'parent__numero', 'position', 'page', 'lieu_conservation', 'cote'), 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'source', 'verbose_name_plural': 'sources'},
        ),
        migrations.AlterField(
            model_name='auteur',
            name='profession',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='auteurs', to='libretto.profession', verbose_name='profession'),
        ),
        migrations.AlterField(
            model_name='source',
            name='folio',
            field=models.CharField(blank=True, help_text='Sans «\xa0f.\xa0». Exemple\xa0: «\xa03\xa0».', max_length=15, verbose_name='folio'),
        ),
        migrations.AlterField(
            model_name='source',
            name='page',
            field=models.CharField(blank=True, db_index=True, help_text='Sans «\xa0p.\xa0». Exemple\u202f: «\xa03\xa0»', max_length=15, verbose_name='page'),
        ),
        migrations.AddField(
            model_name='source',
            name='bibliographie',
            field=models.TextField(blank=True, verbose_name='bibliographie indicative'),
        ),
        migrations.AddField(
            model_name='source',
            name='contexte',
            field=models.TextField(blank=True, verbose_name='contexte historique'),
        ),
        migrations.AddField(
            model_name='source',
            name='date_publication',
            field=models.DateField(default=datetime.datetime.now, verbose_name='date de publication'),
        ),
        migrations.AddField(
            model_name='source',
            name='developpements',
            field=models.TextField(blank=True, verbose_name='développements envisagés'),
        ),
        migrations.AddField(
            model_name='source',
            name='presentation',
            field=models.TextField(blank=True, verbose_name='présentation'),
        ),
        migrations.AddField(
            model_name='source',
            name='publications',
            field=models.TextField(blank=True, verbose_name='publication(s) associée(s)'),
        ),
        migrations.AddField(
            model_name='source',
            name='sources_et_protocole',
            field=models.TextField(blank=True, verbose_name='sources et protocole'),
        ),
        migrations.AddField(
            model_name='source',
            name='telechargement_autorise',
            field=models.BooleanField(default=True, verbose_name='téléchargement autorisé'),
        ),
        migrations.AlterModelOptions(
            name='membre',
            options={'ordering': ('instrument', 'profession', 'classement', 'debut'), 'verbose_name': 'membre', 'verbose_name_plural': 'membres'},
        ),
        migrations.AddField(
            model_name='membre',
            name='profession',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='membres', to='libretto.profession', verbose_name='profession'),
        ),
        migrations.AddField(
            model_name='source',
            name='editeurs_scientifiques',
            field=models.ManyToManyField(blank=True, related_name='sources_editees', to=settings.AUTH_USER_MODEL, verbose_name='éditeurs scientifiques'),
        ),
        tree.operations.DeleteTreeTrigger(
            model_lookup='oeuvre',
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='numero',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa05\xa0» pour symphonie n°\xa05, «\xa07a\xa0» pour valse n°\xa07\u202fa, ou encore «\xa03-7\xa0» pour sonates n°\xa03 à\xa07. <strong>Ne pas confondre avec le sous-numéro d’opus.</strong>', max_length=10, validators=[django.core.validators.RegexValidator('^[\\d\\w\\-]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentuées et tiret, le tout sans espace.')], verbose_name='numéro'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='numero_extrait',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Le numéro de l’extrait au sein de l’œuvre, par exemple «\xa03\xa0» pour le 3<sup>e</sup> mouvement d’un concerto, «\xa04\xa0» pour l’acte IV d’un opéra, ou encore «\xa012b\xa0».', max_length=10, validators=[django.core.validators.RegexValidator('^([1-9]\\d*)([^\\d\\.\\-]*)$', 'Vous devez saisir un nombre en chiffres arabes éventellement suivi de lettres.')], verbose_name='numéro d’extrait'),
        ),
        migrations.AlterField(
            model_name='source',
            name='lieu_conservation',
            field=models.CharField(blank=True, db_index=True, max_length=75, verbose_name='lieu de conservation'),
        ),
        migrations.AlterField(
            model_name='source',
            name='numero',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Sans «\xa0№\xa0». Exemple\u202f: «\xa052\xa0»', max_length=50, verbose_name='numéro'),
        ),
        tree.operations.CreateTreeTrigger(
            model_lookup='oeuvre',
        ),
        tree.operations.RebuildPaths(
            model_lookup='oeuvre',
        ),
        migrations.AlterField(
            model_name='source',
            name='position',
            field=models.PositiveIntegerField(blank=True, help_text='Position au sein de son parent.', null=True, verbose_name='position'),
        ),
        migrations.AlterModelOptions(
            name='membre',
            options={'ordering': ('classement', 'individu__nom', 'individu__prenoms'), 'verbose_name': 'membre', 'verbose_name_plural': 'membres'},
        ),
        migrations.AlterField(
            model_name='evenement',
            name='recette_generale',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='recette générale'),
        ),
        migrations.AddField(
            model_name='partie',
            name='premier_interprete',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parties_creees', to='libretto.individu', verbose_name='premier(ère) interprète'),
        ),
        migrations.AlterField(
            model_name='membre',
            name='instrument',
            field=models.ForeignKey(blank=True, limit_choices_to=libretto.models.personnel.limit_choices_to_instruments, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='membres', to='libretto.partie', verbose_name='instrument'),
        ),
        tree.operations.DeleteTreeTrigger(
            model_lookup='lieu',
        ),
        migrations.RemoveField(
            model_name='lieu',
            name='path',
        ),
        migrations.AddField(
            model_name='lieu',
            name='path',
            field=tree.fields.PathField(db_index=True, order_by=['nom']),
        ),
        tree.operations.CreateTreeTrigger(
            model_lookup='lieu',
        ),
        tree.operations.RebuildPaths(
            model_lookup='lieu',
        ),
        tree.operations.DeleteTreeTrigger(
            model_lookup='oeuvre',
        ),
        migrations.RemoveField(
            model_name='oeuvre',
            name='path',
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='path',
            field=tree.fields.PathField(db_index=True, order_by=['type_extrait', 'numero_extrait', 'titre', 'genre', 'numero', 'coupe', 'incipit', 'tempo', 'tonalite', 'sujet', 'arrangement', 'surnom', 'nom_courant', 'opus', 'ict'], parent_field_name='extrait_de'),
        ),
        tree.operations.CreateTreeTrigger(
            model_lookup='oeuvre',
        ),
        tree.operations.RebuildPaths(
            model_lookup='oeuvre',
        ),
        migrations.AlterModelOptions(
            name='lieu',
            options={'ordering': ['path'], 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'lieu ou institution', 'verbose_name_plural': 'lieux et institutions'},
        ),
        migrations.AlterModelOptions(
            name='oeuvre',
            options={'ordering': ['path'], 'permissions': (('can_change_status', 'Peut changer l’état'),), 'verbose_name': 'œuvre', 'verbose_name_plural': 'œuvres'},
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=models.Index(django.db.models.expressions.RawSQL('path[:array_length(path, 1) - 1]', ()), name='lieu_path_parent_index'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=models.Index(django.db.models.expressions.F('path__level'), name='lieu_path_level_index'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=models.Index(django.db.models.expressions.F('path__0_1'), name='lieu_path_slice_1_index'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=models.Index(django.db.models.expressions.F('path__0_2'), name='lieu_path_slice_2_index'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=models.Index(django.db.models.expressions.F('path__0_3'), name='lieu_path_slice_3_index'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=models.Index(django.db.models.expressions.F('path__0_4'), name='lieu_path_slice_4_index'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=models.Index(django.db.models.expressions.F('path__0_5'), name='lieu_path_slice_5_index'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=models.Index(django.db.models.expressions.RawSQL('path[:array_length(path, 1) - 1]', ()), name='oeuvre_path_parent_index'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=models.Index(django.db.models.expressions.F('path__level'), name='oeuvre_path_level_index'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=models.Index(django.db.models.expressions.F('path__0_1'), name='oeuvre_path_slice_1_index'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=models.Index(django.db.models.expressions.F('path__0_2'), name='oeuvre_path_slice_2_index'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=models.Index(django.db.models.expressions.F('path__0_3'), name='oeuvre_path_slice_3_index'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=models.Index(django.db.models.expressions.F('path__0_4'), name='oeuvre_path_slice_4_index'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=models.Index(django.db.models.expressions.F('path__0_5'), name='oeuvre_path_slice_5_index'),
        ),
        migrations.AlterModelOptions(
            name='typedeparentedindividus',
            options={'ordering': ['classement'], 'verbose_name': 'type de parenté d’individus', 'verbose_name_plural': 'types de parenté d’individus'},
        ),
        migrations.AlterModelOptions(
            name='typedeparentedoeuvres',
            options={'ordering': ['classement'], 'verbose_name': 'type de parenté d’œuvres', 'verbose_name_plural': 'types de parentés d’œuvres'},
        ),
        migrations.AddField(
            model_name='auteur',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='caracteristiquedeprogramme',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='elementdeprogramme',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='ensemble',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='evenement',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='genredoeuvre',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='individu',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='lieu',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='membre',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='naturedelieu',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='parentedindividus',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='parentedoeuvres',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='partie',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='profession',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='pupitre',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='saison',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='source',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedecaracteristiquedeprogramme',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedensemble',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedeparentedindividus',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedeparentedoeuvres',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedesource',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddIndex(
            model_name='caracteristiquedeprogramme',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='caracdeprogramme_search'),
        ),
        migrations.AddIndex(
            model_name='elementdedistribution',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='elementdedistribution_search'),
        ),
        migrations.AddIndex(
            model_name='elementdeprogramme',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='elementdeprogramme_search'),
        ),
        migrations.AddIndex(
            model_name='ensemble',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='ensemble_search'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='evenement_search'),
        ),
        migrations.AddIndex(
            model_name='genredoeuvre',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='genredoeuvre_search'),
        ),
        migrations.AddIndex(
            model_name='individu',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='individu_search'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='lieu_search'),
        ),
        migrations.AddIndex(
            model_name='naturedelieu',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='naturedelieu_search'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='oeuvre_search'),
        ),
        migrations.AddIndex(
            model_name='partie',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='partie_search'),
        ),
        migrations.AddIndex(
            model_name='profession',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='profession_search'),
        ),
        migrations.AddIndex(
            model_name='pupitre',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='pupitre_search'),
        ),
        migrations.AddIndex(
            model_name='source',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='source_search'),
        ),
        migrations.AddIndex(
            model_name='typedecaracteristiquedeprogramme',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='typecaracdeprogramme_search'),
        ),
        migrations.AddIndex(
            model_name='typedensemble',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='typedensemble_search'),
        ),
        migrations.AddIndex(
            model_name='typedeparentedindividus',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='typedeparentedindividus_search'),
        ),
        migrations.AddIndex(
            model_name='typedeparentedoeuvres',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='typedeparentedoeuvres_search'),
        ),
        migrations.AddIndex(
            model_name='typedesource',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='typedesource_search'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='sujet',
            field=models.CharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa0un thème de Beethoven\xa0» pour une variation sur un thème de Beethoven, «\xa0des motifs de &lt;em&gt;Lucia di Lammermoor&lt;/em&gt;\xa0» pour une fantaisie sur des motifs de <em>Lucia di Lammermoor</em> (&lt;em&gt; et &lt;/em&gt; sont les balises HTML pour mettre en emphase).', max_length=80, verbose_name='sujet'),
        ),
        migrations.RemoveIndex(
            model_name='elementdedistribution',
            name='elementdedistribution_search',
        ),
        migrations.RemoveIndex(
            model_name='elementdeprogramme',
            name='elementdeprogramme_search',
        ),
        migrations.RemoveIndex(
            model_name='typedeparentedindividus',
            name='typedeparentedindividus_search',
        ),
        migrations.RemoveIndex(
            model_name='typedeparentedoeuvres',
            name='typedeparentedoeuvres_search',
        ),
        migrations.AddField(
            model_name='auteur',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='caracteristiquedeprogramme',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='elementdedistribution',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='elementdeprogramme',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='ensemble',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='evenement',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='genredoeuvre',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='individu',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='lieu',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='membre',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='naturedelieu',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='parentedindividus',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='parentedoeuvres',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='partie',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='profession',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='pupitre',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='saison',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='source',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedecaracteristiquedeprogramme',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedensemble',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedeparentedindividus',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedeparentedoeuvres',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='typedesource',
            name='autocomplete_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True),
        ),
        migrations.AddIndex(
            model_name='caracteristiquedeprogramme',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='caracprogr_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='elementdedistribution',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='elementdistrib_search'),
        ),
        migrations.AddIndex(
            model_name='elementdedistribution',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='elementdistrib_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='elementdeprogramme',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='elementprogr_search'),
        ),
        migrations.AddIndex(
            model_name='elementdeprogramme',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='elementprogr_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='ensemble',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='ensemble_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='evenement_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='genredoeuvre',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='genredoeuvre_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='individu',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='individu_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='lieu',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='lieu_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='naturedelieu',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='naturedelieu_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='oeuvre',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='oeuvre_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='partie',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='partie_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='profession',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='profession_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='pupitre',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='pupitre_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='source',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='source_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='typedecaracteristiquedeprogramme',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='typecaracprogr_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='typedensemble',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='typedensemble_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='typedeparentedindividus',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='typeparenteindiv_search'),
        ),
        migrations.AddIndex(
            model_name='typedeparentedindividus',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='typeparenteindiv_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='typedeparentedoeuvres',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('search_vector'), name='typeparenteoeuv_search'),
        ),
        migrations.AddIndex(
            model_name='typedeparentedoeuvres',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='typeparenteoeuv_autocomplete'),
        ),
        migrations.AddIndex(
            model_name='typedesource',
            index=django.contrib.postgres.indexes.GinIndex(django.db.models.expressions.F('autocomplete_vector'), name='typedesource_autocomplete'),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='ambitus',
            field=django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True, verbose_name='ambitus'),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='dedicataire',
            field=models.ForeignKey(blank=True, help_text='N’ajouter que des autorités confirmées. Dans le cas contraire, utiliser les notes.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='dedicaces_old', to='libretto.individu', verbose_name='dédié à'),
        ),
        migrations.AddField(
            model_name='oeuvre',
            name='dedicataires',
            field=models.ManyToManyField(blank=True, help_text='N’ajouter que des autorités confirmées. Dans le cas contraire, utiliser les notes.', related_name='dedicaces', to='libretto.Individu', verbose_name='dédié à'),
        ),
        migrations.RemoveField(
            model_name='oeuvre',
            name='dedicataire',
        ),
        tree.operations.DeleteTreeTrigger(
            model_lookup='oeuvre',
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='numero',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa05\xa0» pour symphonie n°\xa05, «\xa07a\xa0» pour valse n°\xa07\u202fa, ou encore «\xa03-7\xa0» pour sonates n°\xa03 à\xa07. <strong>Ne pas confondre avec le sous-numéro d’opus.</strong>', max_length=11, validators=[django.core.validators.RegexValidator('^[\\d\\w\\-]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentuées et tiret, le tout sans espace.')], verbose_name='numéro'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='numero_extrait',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Le numéro de l’extrait au sein de l’œuvre, par exemple «\xa03\xa0» pour le 3<sup>e</sup> mouvement d’un concerto, «\xa04\xa0» pour l’acte IV d’un opéra, ou encore «\xa012b\xa0».', max_length=11, validators=[django.core.validators.RegexValidator('^([1-9]\\d*)([^\\d\\.\\-]*)$', 'Vous devez saisir un nombre en chiffres arabes éventellement suivi de lettres.')], verbose_name='numéro d’extrait'),
        ),
        migrations.AlterField(
            model_name='source',
            name='numero',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Sans «\xa0№\xa0». Exemple\u202f: «\xa052\xa0»', max_length=51, verbose_name='numéro'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='numero',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Exemple\xa0: «\xa05\xa0» pour symphonie n°\xa05, «\xa07a\xa0» pour valse n°\xa07\u202fa, ou encore «\xa03-7\xa0» pour sonates n°\xa03 à\xa07. <strong>Ne pas confondre avec le sous-numéro d’opus.</strong>', max_length=10, validators=[django.core.validators.RegexValidator('^[\\d\\w\\-]+$', 'Vous ne pouvez saisir que des chiffres, lettres non accentuées et tiret, le tout sans espace.')], verbose_name='numéro'),
        ),
        migrations.AlterField(
            model_name='oeuvre',
            name='numero_extrait',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Le numéro de l’extrait au sein de l’œuvre, par exemple «\xa03\xa0» pour le 3<sup>e</sup> mouvement d’un concerto, «\xa04\xa0» pour l’acte IV d’un opéra, ou encore «\xa012b\xa0».', max_length=10, validators=[django.core.validators.RegexValidator('^([1-9]\\d*)([^\\d\\.\\-]*)$', 'Vous devez saisir un nombre en chiffres arabes éventellement suivi de lettres.')], verbose_name='numéro d’extrait'),
        ),
        migrations.AlterField(
            model_name='source',
            name='numero',
            field=libretto.models.base.NumberCharField(blank=True, db_index=True, help_text='Sans «\xa0№\xa0». Exemple\u202f: «\xa052\xa0»', max_length=50, verbose_name='numéro'),
        ),
        tree.operations.CreateTreeTrigger(
            model_lookup='oeuvre',
        ),
        tree.operations.RebuildPaths(
            model_lookup='oeuvre',
        ),
        migrations.RunSQL(
            sql='\n                ALTER TABLE libretto_elementdedistribution\n                DROP CONSTRAINT individu_xor_ensemble;\n            \n                ALTER TABLE libretto_elementdedistribution\n                DROP CONSTRAINT evenement_xor_elementdeprogramme;\n\n                ALTER TABLE libretto_elementdedistribution\n                DROP CONSTRAINT not_partie_and_profession;\n\n                ALTER TABLE libretto_auteur\n                DROP CONSTRAINT oeuvre_xor_source;\n\n                ALTER TABLE libretto_auteur\n                DROP CONSTRAINT individu_xor_ensemble;\n            ',
            reverse_sql='\n                ALTER TABLE libretto_elementdedistribution\n                ADD CONSTRAINT evenement_xor_elementdeprogramme\n                CHECK ((evenement_id IS NOT NULL) <> (element_de_programme_id IS NOT NULL));\n\n                ALTER TABLE libretto_elementdedistribution\n                ADD CONSTRAINT not_partie_and_profession\n                CHECK (NOT (partie_id IS NOT NULL AND profession_id IS NOT NULL));\n\n                ALTER TABLE libretto_auteur\n                ADD CONSTRAINT oeuvre_xor_source\n                CHECK ((oeuvre_id IS NOT NULL) <> (source_id IS NOT NULL));\n\n                ALTER TABLE libretto_auteur\n                ADD CONSTRAINT individu_xor_ensemble\n                CHECK ((individu_id IS NOT NULL) <> (ensemble_id IS NOT NULL));\n                \n                ALTER TABLE libretto_elementdedistribution\n                ADD CONSTRAINT individu_xor_ensemble\n                CHECK ((individu_id IS NOT NULL) <> (ensemble_id IS NOT NULL));\n            ',
        ),
        migrations.AddConstraint(
            model_name='auteur',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('oeuvre__isnull', True), ('source__isnull', False)), models.Q(('oeuvre__isnull', False), ('source__isnull', True)), _connector='OR'), name='auteur_has_oeuvre_xor_source'),
        ),
        migrations.AddConstraint(
            model_name='auteur',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('individu__isnull', True), ('ensemble__isnull', False)), models.Q(('individu__isnull', False), ('ensemble__isnull', True)), _connector='OR'), name='auteur_has_individu_xor_ensemble'),
        ),
        migrations.AddConstraint(
            model_name='elementdedistribution',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('evenement__isnull', True), ('element_de_programme__isnull', False)), models.Q(('evenement__isnull', False), ('element_de_programme__isnull', True)), _connector='OR'), name='distribution_has_evenement_xor_programme'),
        ),
        migrations.AddConstraint(
            model_name='elementdedistribution',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('individu__isnull', True), ('ensemble__isnull', False)), models.Q(('individu__isnull', False), ('ensemble__isnull', True)), _connector='OR'), name='distribution_has_individu_xor_ensemble'),
        ),
        migrations.AddConstraint(
            model_name='elementdedistribution',
            constraint=models.CheckConstraint(check=models.Q(('partie__isnull', False), ('profession__isnull', False), _negated=True), name='distribution_has_not_partie_and_profession'),
        ),
    ]
